%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% AUTHORS: Pauline Chikhani & Jean-Paul Renne
% DATE: July 2025
%
% DESCRIPTION:
% This script generates three csv files:
% - RCP_Mat_MAGICC.csv,
%   which contains trajectories of temperatures,
%   radiative forcings, carbon emissions, and carbon concentrations
%   based on the MAGICC6.0 model (Meinshausen et al., 2011).
% - RCP_Mat_ACE.csv,
%   which contains trajectories of temperatures based on the ACE model
%   of Traeger (2023). These trajectories are extracted from the replication package of Traeger (2023).
% - IRF_Traeger_5y.csv,
%   which contains impulse response functions based on the ACE model of
%   Traeger (2023). These responses are shown in Figure 2 of Chikhani and Renne (2025).
% 
% The original raw data, as well as some pieces of codes used below are
%    extracted from the replication package of Traeger (2023), available
%    here: https://www.openicpsr.org/openicpsr/project/154141/version/V1/view
%
% ACKNOWLEDGMENT:
% This code builds upon earlier work by Traeger (2023).
% Original datasets (MagiccOcean.mat and TempFit.mat) and parts
% of the code structure are sourced from his implementation.
% We thank him for making these resources available.
% Traeger replication package: Original dataset can be retrieved at
% https://www.openicpsr.org/openicpsr/project/154141/version/V1/view
%
% DISCLAIMER:
% This script does not claim authorship of the original datasets or
% simulation design from which it is adapted.
%
% IMPLEMENTATION:
% Before sourcing the present script:
%  - download "MagiccOcean.mat" from Traeger's replication package
%    (the precise web address is given below),
%    and save it in the folder where the present script is.
%  - download "impulse_timestep_5_logi_001.mat" from Traeger's replication package
%    (the precise web address is given below),
%    and save it in the folder where the present script is.
%  - make sure the Matlab working directory path is the one where the script is.
%
% "MagiccOcean.mat" is available here:
% https://www.openicpsr.org/openicpsr/project/154141/version/V1/view?path=/openicpsr/154141/fcr:versions/V1/MagiccOcean.mat&type=file
% "impulse_timestep_5_logi_001.mat" is available here:
% https://www.openicpsr.org/openicpsr/project/154141/version/V1/view?path=/openicpsr/154141/fcr:versions/V1/impulse_timestep_5_logi_001.mat&type=file
%
%
% REFERENCES:
% Traeger, C. P. (2023). ACE-Analytic Climate Economy. American Economic Journal: Economic Policy 15(3), 372-406.
% Meinshausen, M., S. C. B. Raper, and T. M. L. Wigley (2011). Emulating Coupled Atmosphere-Ocean and Carbon
%    Cycle Models with a Simpler Model, MAGICC6 Part 1: Model Description and Calibration. Atmospheric
%    Chemistry and Physics 11(4), 1417-1456.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% Clear environment
close all;
clear all;
clc;

%% Traeger
% importing Magicc 6.0 data generated by CT using downloaded version of Magicc 6.0
load MagiccOcean.mat

%% CR
M_AT = [MagiccOcean.RCP3PD.Carboncycle(:,5) ...
    MagiccOcean.RCP45.Carboncycle(:,5) ...
    MagiccOcean.RCP6.Carboncycle(:,5) ...
    MagiccOcean.RCP85.Carboncycle(:,5)];

T_AT = [MagiccOcean.RCP3PD.Tempatm ...
    MagiccOcean.RCP45.Tempatm ...
    MagiccOcean.RCP6.Tempatm ...
    MagiccOcean.RCP85.Tempatm];

E_CO2 = [MagiccOcean.RCP3PD.EmissionCO2(:,1) + MagiccOcean.RCP3PD.EmissionCO2(:,2) ...
    MagiccOcean.RCP45.EmissionCO2(:,1) + MagiccOcean.RCP45.EmissionCO2(:,2) ...
    MagiccOcean.RCP6.EmissionCO2(:,1) + MagiccOcean.RCP6.EmissionCO2(:,2) ...
    MagiccOcean.RCP85.EmissionCO2(:,1) + MagiccOcean.RCP85.EmissionCO2(:,2)];

RF = [MagiccOcean.RCP3PD.RFtot ...
    MagiccOcean.RCP45.RFtot ...
    MagiccOcean.RCP6.RFtot ...
    MagiccOcean.RCP85.RFtot];

M = [MagiccOcean.RCP3PD.Year M_AT T_AT E_CO2 RF] ;
M = M(246:end,:) ; % start in 2010
csvwrite("../RCP_Mat_MAGICC.csv",M) ;

disp("------------------------------------------------------------------------")
disp("The file RCP_Mat_MAGICC.csv has been created and saved in the /data/ folder")


%% Traeger
logic.plot = 2;
% =0 (other) plot nothing
% =1 plotting, otherwise only output to screen
% =2 plots only overview graphs for all scenarios
% Note: Generating plot data for TempSimulation_ACE.m requires option 1 or 2

Startdate=2015;   % 2015;  % for estimation
Enddate=2400;    % for estimation

% Fixed settings of final calibration
cs=3;      % climate sensitivity
eta=3.8;   % forcing parameter used to calculate CO2equivalents from RF
timestep=5;
Oceanlayers=2;       % Number of ocean layers used in calibration
Selectlayers=[5 40]; % Ocean layer's of Magicc used in calibration for shallow ocean (layer 5) and deep ocean (layer 40)
weight=[4 2 1];      % sets weights for error returned, weight on atmosphere, shallow, and deep ocean
sigma = [0.538194273157518	0.0765198358638229	0.00399267991987196	0.461805699284704	0.0274865322002226]; % Corresponding sigma, same as in TMDynamics.m


scenario = fieldnames(MagiccOcean);
S = length(scenario);

startpos = find(MagiccOcean.(scenario{1}).Year == Startdate);
endpos = find(MagiccOcean.(scenario{1}).Year == Enddate);
if endpos-startpos~=Enddate-Startdate
    error('Years Missing, interrrupt')
end

Temp = zeros(Oceanlayers+1, S, floor((endpos-startpos)/timestep + 1));
RF = zeros(S, floor((endpos-startpos)/timestep + 1));

for s = 1:S
    RF(s,:) = MagiccOcean.(scenario{s}).RFtot(startpos:timestep:endpos)';
    Temp(1,s,:) = MagiccOcean.(scenario{s}).Tempatm(startpos:timestep:endpos)';
    for l = 1:Oceanlayers
        Temp(l+1,s,:) = MagiccOcean.(scenario{s}).Temp(startpos:timestep:endpos, Selectlayers(l))';
    end
end

forcing = exp(log(2)/eta * RF);

xi_base(1)=log(2)/cs;
xi_base(2:Oceanlayers+1)=log(2)/cs;

[layers, scenarios, horizon] = size(Temp);

%Temp: 3-D temparature field: layers (atm and ocean) , scenarios , horizon
[~, TempSim, ~] = TempSimulation_ACE(sigma, Temp, forcing, xi_base, weight, logic);

% Evaluating results for print out on screen and saving
for i = 1:scenarios
    Temp_combined_plot_atm_sim(:,i) = TempSim(1,i,:);
end


%% CR

M = [(Startdate:timestep:Enddate)' Temp_combined_plot_atm_sim(:,[1 3 5 6])] ;
csvwrite("../RCP_Mat_ACE.csv",M) ;

disp("------------------------------------------------------------------------")
disp("The file RCP_Mat_ACE.csv has been created and saved in the /data/ folder")




%% Traeger
% Take DICE 2013 and 16 from 5 year time step (scaling of temperature model not working)
load(['impulse_timestep_5_logi_001.mat'], ...
    'horizon_legend','hori','Temp_DICE_pulse','Temp_DICE','Temp_DICE_pulse16','Temp_DICE16', ...
    'M16','M_pulse16','M','M_pulse','Temp_pulse','Temp','Temp_Joos','pulse')

ACE_Impulse_DICE5=Temp_pulse(1,1:hori)-Temp(1,1:hori);
ACE_Impulse_Joos5=Temp_Joos(1,1:hori)-Temp(1,1:hori);

%% CR
csvwrite("../IRF_Traeger_5y.csv", ...
    [ACE_Impulse_DICE5' ACE_Impulse_Joos5']);

disp("------------------------------------------------------------------------")
disp("The file IRF_Traeger_5y.csv has been created and saved in the /data/ folder")
disp("------------------------------------------------------------------------")


%% Traeger

function [err,TempSim,xi]=TempSimulation_ACE(sigma,Temp,forcing,xi,weight,logic)
    % =========================================================================
    % This function is from the replication package of
    % Traeger, C. P. (2023). ACE-Analytic Climate Economy.
    %       American Economic Journal: Economic Policy 15(3), 372-406.
    % Paper available at https://www.aeaweb.org/articles?id=10.1257/pol.20210297
    % -------------------------------------------------------------------------
    % This replication package: Original dataset can be retrieved at
    % https://www.openicpsr.org/openicpsr/project/154141/version/V1/view
    % DISCLAIMER:
    % This script does not claim authorship of the original datasets or
    % simulation design from which it is adapted.
    % =========================================================================
    %Inputs:
    % Temp: 3-D temparature field: layers (atm and ocean) , scenarios , horizon
    % Forcing: 2-D scenarios , time
    % sigma:
    %  first "1:layer" entries: sigma_up
    %  next  "1:layer-1" entries: sigma_down
    % xi: vector of length layers
    % weight: vector of length layers, weights on squared differences
    %Output:
    % squared and weighted sum of errors, Simulated T

    [layers scenarios horizon]=size(Temp);

    %% Extracing different endogneously optimized parameters from sigma
    xione = xi(1); % saves standard value for screen printout (don't have access to cs)
    sigma_up=sigma(1:layers);               % length of layers
    sigma_down=sigma(layers+1:2*layers-1);  % lenght of layers-1
    taubar = 1;

    % standard version: no heat exchange with lower boundary layer
    sigma_down(layers)=0;      % Adding a zero for downward heat exchange last layer

    %% Initializing and Simulating

    % Need starting values for each scenario
    Tau=zeros(layers,scenarios,horizon);
    Tau(:,:,1)=exp(diag(xi)*Temp(:,:,1));
    TempSim(:,:,1)=Temp(:,:,1);

    for y=1:horizon-1
        % Need time in last, layers in rows of remaining matrix, so scenarios in colums
        Tau(:,:,y+1)=diag(1-sigma_up-sigma_down)*Tau(:,:,y)+diag(sigma_up)*[forcing(:,y)' ; Tau(1:layers-1,:,y)]+diag(sigma_down)*[Tau(2:layers,:,y) ; taubar*ones(1,scenarios)];
        TempSim(:,:,y+1)=diag(1./xi)*log(Tau(:,:,y+1));
    end


    %% Evaluating

    diff_sum=0;
    for l=1:layers
        diff=weight(l)*(TempSim(l,:,:)-Temp(l,:,:)).^2;
        diff_sum=diff_sum+sum(sum(diff));
    end

    err=diff_sum;
end


