Q.col<-adjustcolor( Q.col.line, alpha.f = 0.15)
# Nb of values used for refined grid when computing Conf Intervals:
nb.values.variable <- 400
source("~/Dropbox/Research/TIBs/CR_Rcodes/outputs/make_figures/make_figure_Merton.R", echo=TRUE)
#Plots
FILE = paste("/outputs/Figures/Figure_Merton2.pdf",sep="")
pdf(file=paste(getwd(),FILE,sep=""),pointsize=10,width=7, height=4)
par(mfrow=c(1,2))
par(plt=c(.15,.95,.2,.85))
xlab <- expression(bar(A))
# # Plot of expected equity return
# for(indic.plot in 1:length(vector.of.muAD)){
#   if(indic.plot==1){
#     plot(A_bar,100*return.Eq.yearly[,indic.plot],type="l",
#          xlim=xlim,ylim=ylim.returns,xlab=xlab,
#          ylab="",
#          lwd=2,cex.lab=1.3,
#          main="(a) Expected equity excess return (%)",
#          col="black",las=1)
#     legend("topleft",
#            legend=legend.muAD,
#            lty=c(1,3),
#            col=c("black"),cex=1.1,
#            lwd=c(2,2),bty = "n")
#   }else{
#     lines(A_bar,100*return.Eq.yearly[,indic.plot],
#           lwd=2,lty=3,col="black")
#   }
# }
# Plot of yields
for(indic.plot in 1:length(vector.of.muAD)){
if(indic.plot==1){
plot(A_bar,-100/(horizon*model_sol$tstep)*log(B.star[,1]),
lwd=2,type="l",
xlim=xlim,ylim=ylim.ratioRates,xlab=xlab,
ylab="",las=1,
main="(a) Bond yields",
cex.lab=1.3)
legend("topleft",
legend=c(legend.muAD,expression("risk-free yield")),
lty=c(1,3,1),
col=c("black","black","grey"),cex=1.1,
lwd=c(2,2,2),bty = "n")
}else{
lines(A_bar,-100/(horizon*model_sol$tstep)*log(B.star[,2]),
lwd=2,lty=3)
}
}
abline(h=prices.ZCRF.bonds$r.t[horizon],col="grey",lwd=2)
# Plot of PDs
for(indic.plot in 1:length(vector.of.muAD)){
if(indic.plot==1){
plot(A_bar,log(PD.P[,indic.plot]),
xlim=xlim,ylim=ylim.PD,lwd=2,type="l",
xlab=xlab,yaxt="n",
ylab="",
main="(b) Probability of default (PD)",
cex.lab=1.3,col="white")
values.proba.axis <- c(.001,.005,.01,.05,.1,.25,.5,1)
axis(side=2,
at=log(values.proba.axis),
labels=paste(100*values.proba.axis,"%",sep=""),las=1)
for(i in 1:length(values.proba.axis)){
abline(h=log(values.proba.axis[i]),lty=3,col="grey")
}
lines(A_bar,log(PD.P[,indic.plot]),col=P.col.line,lwd=2)
lines(A_bar,log(PD.Q[,indic.plot]),col=Q.col.line,lwd=2)
abline(h=0,col="grey")
legend("topleft",
legend=legend.muAD,
lty=c(1,3),
col=c("black"),cex=1.1,
lwd=c(2,2),bty = "n")
legend("bottomright",
legend=c("Physical (P)","Risk-neutral (Q)"),
lty=c(1,1),
col=c(P.col.line,Q.col.line),cex=1.1,
lwd=2,bty = "n")
}else{
lines(A_bar,log(PD.P[,indic.plot]),lwd=2,lty=3,col=P.col.line)
lines(A_bar,log(PD.Q[,indic.plot]),col=Q.col.line,lwd=2,lty=3)
}
}
# # Plot of P/Q PD ratio
# for(indic.plot in 1:length(vector.of.muAD)){
#   if(indic.plot==1){
#     plot(A_bar,PD.Q[,indic.plot]/PD.P[,indic.plot],
#          lwd=2,type="l",
#          xlim=xlim,ylim=ylim.ratioPD,xlab=xlab,
#          ylab="",las=1,
#          main="(d) Ratio of PDs (Q/P)",
#          cex.lab=1.3)
#     legend("topleft",
#            legend=legend.muAD,
#            lty=c(1,3),
#            col=c("black"),cex=1.1,
#            lwd=c(2,2),bty = "n")
#   }else{
#     lines(A_bar,PD.Q[,indic.plot]/PD.P[,indic.plot],lwd=2,lty=3)
#   }
# }
dev.off()
#Plots
FILE = paste("/outputs/Figures/Figure_Merton2.pdf",sep="")
pdf(file=paste(getwd(),FILE,sep=""),pointsize=10,width=8, height=4)
par(mfrow=c(1,2))
par(plt=c(.15,.95,.2,.85))
xlab <- expression(bar(A))
# # Plot of expected equity return
# for(indic.plot in 1:length(vector.of.muAD)){
#   if(indic.plot==1){
#     plot(A_bar,100*return.Eq.yearly[,indic.plot],type="l",
#          xlim=xlim,ylim=ylim.returns,xlab=xlab,
#          ylab="",
#          lwd=2,cex.lab=1.3,
#          main="(a) Expected equity excess return (%)",
#          col="black",las=1)
#     legend("topleft",
#            legend=legend.muAD,
#            lty=c(1,3),
#            col=c("black"),cex=1.1,
#            lwd=c(2,2),bty = "n")
#   }else{
#     lines(A_bar,100*return.Eq.yearly[,indic.plot],
#           lwd=2,lty=3,col="black")
#   }
# }
# Plot of yields
for(indic.plot in 1:length(vector.of.muAD)){
if(indic.plot==1){
plot(A_bar,-100/(horizon*model_sol$tstep)*log(B.star[,1]),
lwd=2,type="l",
xlim=xlim,ylim=ylim.ratioRates,xlab=xlab,
ylab="",las=1,
main="(a) Bond yields",
cex.lab=1.3)
legend("topleft",
legend=c(legend.muAD,expression("risk-free yield")),
lty=c(1,3,1),
col=c("black","black","grey"),cex=1.1,
lwd=c(2,2,2),bty = "n")
}else{
lines(A_bar,-100/(horizon*model_sol$tstep)*log(B.star[,2]),
lwd=2,lty=3)
}
}
abline(h=prices.ZCRF.bonds$r.t[horizon],col="grey",lwd=2)
# Plot of PDs
for(indic.plot in 1:length(vector.of.muAD)){
if(indic.plot==1){
plot(A_bar,log(PD.P[,indic.plot]),
xlim=xlim,ylim=ylim.PD,lwd=2,type="l",
xlab=xlab,yaxt="n",
ylab="",
main="(b) Probability of default (PD)",
cex.lab=1.3,col="white")
values.proba.axis <- c(.001,.005,.01,.05,.1,.25,.5,1)
axis(side=2,
at=log(values.proba.axis),
labels=paste(100*values.proba.axis,"%",sep=""),las=1)
for(i in 1:length(values.proba.axis)){
abline(h=log(values.proba.axis[i]),lty=3,col="grey")
}
lines(A_bar,log(PD.P[,indic.plot]),col=P.col.line,lwd=2)
lines(A_bar,log(PD.Q[,indic.plot]),col=Q.col.line,lwd=2)
abline(h=0,col="grey")
legend("topleft",
legend=legend.muAD,
lty=c(1,3),
col=c("black"),cex=1.1,
lwd=c(2,2),bty = "n")
legend("bottomright",
legend=c("Physical (P)","Risk-neutral (Q)"),
lty=c(1,1),
col=c(P.col.line,Q.col.line),cex=1.1,
lwd=2,bty = "n")
}else{
lines(A_bar,log(PD.P[,indic.plot]),lwd=2,lty=3,col=P.col.line)
lines(A_bar,log(PD.Q[,indic.plot]),col=Q.col.line,lwd=2,lty=3)
}
}
# # Plot of P/Q PD ratio
# for(indic.plot in 1:length(vector.of.muAD)){
#   if(indic.plot==1){
#     plot(A_bar,PD.Q[,indic.plot]/PD.P[,indic.plot],
#          lwd=2,type="l",
#          xlim=xlim,ylim=ylim.ratioPD,xlab=xlab,
#          ylab="",las=1,
#          main="(d) Ratio of PDs (Q/P)",
#          cex.lab=1.3)
#     legend("topleft",
#            legend=legend.muAD,
#            lty=c(1,3),
#            col=c("black"),cex=1.1,
#            lwd=c(2,2),bty = "n")
#   }else{
#     lines(A_bar,PD.Q[,indic.plot]/PD.P[,indic.plot],lwd=2,lty=3)
#   }
# }
dev.off()
print(log(all.expected.A[,10])/50)
scc.fct(model_sol,0)
model_sol$parameters$b_sk
scc.fct(model_sol,0)
model_sol$names.var.X
model_sol$parameters$b_sk
source("~/Dropbox/Research/TIBs/CR_Rcodes/procedures/functions_general.R", echo=TRUE)
source("~/Dropbox/Research/TIBs/CR_Rcodes/main.R", echo=TRUE)
scc.fct(model_sol,0)
source("~/Dropbox/Research/TIBs/CR_Rcodes/outputs/make_tables/make_table_SCC.R", echo=TRUE)
source("~/Dropbox/Research/TIBs/CR_Rcodes/main.R", echo=TRUE)
scc.fct(model_sol,0)
source("~/Dropbox/Research/TIBs/CR_Rcodes/outputs/make_tables/make_table_param.R", echo=TRUE)
par(plt=c(.1,.9,.1,.9))
param<-model_sol$parameters
# Prepare latex tables
make.entry <- function(x,format.nb){
output <- paste("$",sprintf(format.nb,x),"$",sep="")
return(output)
}
source("~/Dropbox/Research/TIBs/CR_Rcodes/outputs/make_tables/make_table_param.R", echo=TRUE)
latex.table
paste("Time step &",
"$\\Delta t $ &",
"&",
make.entry(model_sol$tstep,format.nb0),
"&years &",
"",
"\\\\",sep="")
paste("Risk aversion&",
"$\\gamma$&",
"\\eqref{eq:logU}&",
make.entry(model_sol$parameters$gamma,format.nb1),
"& &",
"",
"\\\\",sep="")
paste("Discount factor (annual) &",
"$1-\\delta^{\\frac{1}{\\Delta t}}$ &",
"\\eqref{eq:logU}&",
make.entry(100*(1-model_sol$parameters$delta^(1/model_sol$tstep)),format.nb),
"&percent per year&",
"",
"\\\\",sep="")
paste("Capital depreciation rate &",
"$dep$&",
"\\eqref{eq:KDmainText}&",
make.entry(100-100*(1-model_sol$parameters$delta_K)^(1/model_sol$tstep),format.nb0),
"&percent per year&",
"",
"\\\\",sep="")
paste("Avg ratio $M_{AT}\\big/M_{PI}$ over 2020-2100&",
"$m_0$&",
"\\eqref{eq:Fradiat}&",
make.entry(model_sol$parameters$m0,format.nb),
"&&",
"CDICE+RCP",
"\\\\",sep="")
source("~/Dropbox/Research/TIBs/CR_Rcodes/outputs/make_tables/make_table_param.R", echo=TRUE)
source("~/Dropbox/Research/TIBs/CR_Rcodes/outputs/make_tables/make_table_param.R", echo=TRUE)
source("~/Dropbox/Research/TIBs/CR_Rcodes/outputs/make_tables/make_table_IniX.R", echo=TRUE)
# Maturity:
H <-model_sol$horiz.2100                                                        #maturity 2100
EV<-EV.fct(model_sol,H)
#Pricing
omega_ZCB  <- model_sol$omega_ZCB
omega_T.at <- model_sol$omega_T.at
a <- omega_T.at                                                                 #Options related to T_at in X
b <- 2                                                                          #Options pay when a'X < b
# Miscellaneous
n.date<-model_sol$Tmax
# Quantiles considered for pdf charts:
vector.of.CI <- c(0.5,0.8,0.9,0.95)
# Colors:
P.col.line <- brocolors("crayons")["Teal Blue"]
P.col<-adjustcolor( P.col.line, alpha.f = 0.15)
Q.col.line <- brocolors("crayons")["Mango Tango"]
Q.col<-adjustcolor( Q.col.line, alpha.f = 0.15)
# Nb of values used for refined grid when computing Conf Intervals:
nb.values.variable <- 400
source("~/Dropbox/Research/TIBs/CR_Rcodes/outputs/make_figures/make_figure_options.R", echo=TRUE)
all.Probas.Q
all.Probas.P
all.Probas.Q
all.Probas.P
all.Probas.Q
all.Probas.P
all.Probas.Q
ratios.probas
model_sol$names.var.X
source("~/Dropbox/Research/TIBs/CR_Rcodes/outputs/make_figures/make_figure_SCC_vs_TempRP_Lemoine.R", encoding = 'ISO8859-1', echo=TRUE)
source("~/Dropbox/Research/TIBs/CR_Rcodes/outputs/make_figures/make_figure_SCC_vs_TempRP_Lemoine.R", encoding = 'ISO8859-1', echo=TRUE)
source("~/Dropbox/Research/TIBs/CR_Rcodes/outputs/make_figures/make_figure_SCC_vs_TempRP_Lemoine.R", encoding = 'ISO8859-1', echo=TRUE)
source("~/Dropbox/Research/TIBs/CR_Rcodes/outputs/make_figures/make_figure_SCC_vs_TempRP_Lemoine.R", encoding = 'ISO8859-1', echo=TRUE)
source("~/Dropbox/Research/TIBs/CR_Rcodes/outputs/make_figures/make_figure_SCC_vs_TempRP_Lemoine.R", encoding = 'ISO8859-1', echo=TRUE)
source("~/Dropbox/Research/TIBs/CR_Rcodes/outputs/make_figures/make_figure_Tpdf.R", echo=TRUE)
source("~/Dropbox/Research/TIBs/CR_Rcodes/outputs/make_figures/make_figure_Hpdf.R", echo=TRUE)
source("~/Dropbox/Research/TIBs/CR_Rcodes/outputs/make_figures/make_figure_Tpdf.R", echo=TRUE)
RCP_MAGICC$V6
RCP_MAGICC$V7
plot(RCP_MAGICC$V1,RCP_MAGICC$V7)
plot(RCP_MAGICC$V1,RCP_MAGICC$V8)
plot(RCP_MAGICC$V1,.5*(RCP_MAGICC$V7+RCP_MAGICC$V8),xlim=c(2000,2100))
source("~/Dropbox/Research/TIBs/CR_Rcodes/outputs/make_figures/make_figure_Hpdf.R", echo=TRUE)
source("~/Dropbox/Research/TIBs/CR_Rcodes/main.R", echo=TRUE)
scc.fct(model_sol,0)
source("~/Dropbox/Research/TIBs/CR_Rcodes/outputs/make_figures/make_figure_IRF100Gt.R", encoding = 'ISO8859-1', echo=TRUE)
model_sol$parameters$delta
-log(model_sol$parameters$delta)/5
delta <- (1 - .046)^5
delta
source("~/Dropbox/Research/TIBs/CR_Rcodes/outputs/make_figures/make_figure_YC_RF.R", encoding = 'ISO8859-1', echo=TRUE)
gamma <- 1.01
gamma <- 1.45
#gamma <- 1.24
delta <- (1 - .0046)^5
gamma <- 1.42
model.CRRA <- model_sol
model.CRRA$parameters$gamma <- gamma
model.CRRA$parameters$delta <- delta
model.CRRA <- solveParam4c(model.CRRA,indic_CRRA=TRUE)
model_CRRA_sol <- model_solve(model.CRRA,
indic_mitig = T,
indic_CRRA = T)
Price.ZC <- varphi(model_CRRA_sol,
omega.varphi=omega_ZCB,
H = H/model_sol$tstep)
yds_CR_CRRA <- Price.ZC$r.t/100
yds_CR_CRRA
all.SCC.RP <- NULL
all.T.RP   <- NULL
H <- model$horiz.2100
omega_ZCB  <- matrix(0,model_sol$n.X)
omega_T.at <- matrix(0,model_sol$n.X)
omega_T.at[which(model_sol$names.var.X=="T_at")] <- 1
omega_H <- matrix(0,model_sol$n.X)
omega_H[which(model_sol$names.var.X=="H")] <- 1
all.multip.factor <- seq(0.01,1.5,length.out=7)
indic.baseline    <- which((all.multip.factor - 1)^2==min((all.multip.factor - 1)^2))
cases <- seq(0,1,by=.5)
i.case <- 0
indic.CRRA <- 0
i <- 1
model_new <- model_sol
model_new$parameters$gamma <- gamma
targets <- model_sol$target_vector
multip.factor <- all.multip.factor[i]
if(indic.variable=="conso vol"){
targets["sigma_c0"] <- multip.factor * model_sol$target_vector["sigma_c0"]
}
indic.variable
indic.variable <- "conso vol"
model_new <- model_sol
model_new$parameters$gamma <- gamma
targets <- model_sol$target_vector
multip.factor <- all.multip.factor[i]
if(indic.variable=="conso vol"){
targets["sigma_c0"] <- multip.factor * model_sol$target_vector["sigma_c0"]
}
if(indic.variable=="damages"){
targets["ECumD2"] <- 1 - multip.factor *
(1 - model_sol$target_vector["ECumD2"])
targets["ECumD4"] <- 1 - multip.factor *
(1 - model_sol$target_vector["ECumD4"])
targets["stdCumD4"] <- min(multip.factor,1) * model_sol$target_vector["stdCumD4"]
model_new$parameters$b_sk <- multip.factor * model_sol$parameters$b_sk
}
model_new$target_vector <- targets
model_new <- solveParam4D(model_new)
model_new <- solveParam4H(model_new)
model_new <- solveParam4N(model_new)
model_new <- solveParam4c(model_new,
indic_CRRA = (indic.CRRA==1))
# Solve this new model:
model_sol_new <- model_solve(model_new,
indic_CRRA = (indic.CRRA==1))
# Compute SCC:
if(!(indic.CRRA==1)){
SCC <- scc.fct(model_sol_new,h=0)
}else{
SCC <- scc.fct.CRRA(model_sol_new)$SCC.CO2
}
EV    <- EV.fct(model_sol_new,h=H)
ZCB <- varphi(model_sol_new,omega_ZCB,H)
ET.P  <- EV$EX$T_at[1:H]
ET.Q  <- varphi.tilde(model_sol_new,omega_T.at,H)[[1]]/ZCB$P.t
EH.P  <- EV$EX$H[1:H]
EH.Q  <- varphi.tilde(model_sol_new,omega_H,H)[[1]]/ZCB$P.t
T.RP <- c(ET.Q - ET.P)
H.RP <- c(EH.Q - EH.P)
HH <- 200 # maximum horizon considered in infinite sums
epsilon <- .1
X.shock <- model_sol_new$X
X.shock[which(model_sol$names.var.X=="M_at")] <- - epsilon +
X.shock[which(model_sol$names.var.X=="M_at")]
# prices.C   <- varphi(model_sol_new,
#                      omega.varphi = omega_C,
#                      H = 100)
# prices.C.shock   <- varphi(model_sol_new,
#                            omega.varphi = omega_C,
#                            H = 100,
#                            X = X.shock)
# D <- sum(prices.C$P.t) - sum(prices.C.shock$P.t)
EC       <- NULL
EC.shock <- NULL
for(h in 1:HH){
Uh <- matrix(model_sol_new$mu_c1,model_sol$n.X,h)
res.lt       <- multi.lt.fct.Uh(model_sol_new,Uh,X=model_sol_new$X,t=0)
res.lt.shock <- multi.lt.fct.Uh(model_sol_new,Uh,X=X.shock,t=0)
EC <- c(EC,res.lt$uX_t.h)
EC.shock <- c(EC.shock,res.lt.shock$uX_t.h)
}
# Discounted expected benefits:
ZCB <- varphi(model_sol_new,omega_ZCB,HH)
NPV.CO2 <- sum(ZCB$P.t * (EC.shock - EC)/epsilon) *
10^3 * model_sol$parameters$c0 / 3.667
c(SCC,NPV.CO2,ET.Q[H],ET.P[H])
names(res.lt)
res.lt$psi.1
Uh <- matrix(model_sol_new$mu_c1,model_sol$n.X,h)
Uh
names(res.lt)
res.lt$uX_t.h
res.lt.shock$uX_t.h
(res.lt.shock$uX_t.h - res.lt$uX_t.h)/epsilon
res.lt.shock$uX_t.h*res.lt$psi.1[which(model_sol$names.var.X=="M_at")]
1/.000069
245000/15000
source("~/Dropbox/Research/TIBs/CR_Rcodes/main.R", echo=TRUE)
source("~/Dropbox/Research/TIBs/CR_Rcodes/procedures/functions_general.R", echo=TRUE)
source("~/Dropbox/Research/TIBs/CR_Rcodes/procedures/functions_figures.R", encoding = 'ISO8859-1', echo=TRUE)
source("~/Dropbox/Research/TIBs/CR_Rcodes/outputs/make_figures/make_figure_Damage_comparison.R", echo=TRUE)
source("~/Dropbox/Research/TIBs/CR_Rcodes/outputs/make_figures/make_figure_Damage_comparison.R", echo=TRUE)
model$alpha
source("~/Dropbox/Research/TIBs/CR_Rcodes/main.R", echo=TRUE)
source("~/Dropbox/Research/TIBs/CR_Rcodes/outputs/make_figures/make_figure_Damage_comparison.R", echo=TRUE)
source("~/Dropbox/Research/TIBs/CR_Rcodes/main.R", echo=TRUE)
model_sol$alpha
exists("x")
x <- NULL
exists("x")
(1==2)&(2==2)
(2==2)&(2==2)
f <- function(a){
if(a|exists("a")){
if(a){
0
}else{
1
}
}else{
0
}
}
f(1)
f(0)
f <- function(a=TRUE){
print(a)
}
f(1)
f(2)
f()
source("~/Dropbox/Research/TIBs/CR_Rcodes/procedures/functions_general.R", echo=TRUE)
source("~/Dropbox/Research/TIBs/CR_Rcodes/outputs/make_figures/make_figure_Damage_comparison.R", echo=TRUE)
model_sol$parameters$b_sk
source("~/Dropbox/Research/TIBs/CR_Rcodes/outputs/make_figures/make_figure_Damage_comparison.R", echo=TRUE)
model_sol$parameters$b_sk <- 0.01875 # 0.01875
source("~/Dropbox/Research/TIBs/CR_Rcodes/outputs/make_figures/make_figure_Damage_comparison.R", echo=TRUE)
source("~/Dropbox/Research/TIBs/CR_Rcodes/procedures/functions_general.R", echo=TRUE)
source("~/Dropbox/Research/TIBs/CR_Rcodes/procedures/functions_general.R", echo=TRUE)
source("~/Dropbox/Research/TIBs/CR_Rcodes/procedures/functions_figures.R", encoding = 'ISO8859-1', echo=TRUE)
source("~/Dropbox/Research/TIBs/CR_Rcodes/outputs/make_figures/make_figure_Damage_comparison.R", echo=TRUE)
source("~/Dropbox/Research/TIBs/CR_Rcodes/outputs/make_figures/make_figure_Damage_comparison.R", echo=TRUE)
source("~/Dropbox/Research/TIBs/CR_Rcodes/outputs/make_figures/make_figure_Damage_comparison.R", echo=TRUE)
source("~/Dropbox/Research/TIBs/CR_Rcodes/procedures/functions_figures.R", encoding = 'ISO8859-1', echo=TRUE)
source("~/Dropbox/Research/TIBs/CR_Rcodes/procedures/functions_figures.R", encoding = 'ISO8859-1', echo=TRUE)
source("~/Dropbox/Research/TIBs/CR_Rcodes/outputs/make_figures/make_figure_Damage_comparison.R", echo=TRUE)
source("~/Dropbox/Research/TIBs/CR_Rcodes/procedures/functions_figures.R", encoding = 'ISO8859-1', echo=TRUE)
source("~/Dropbox/Research/TIBs/CR_Rcodes/outputs/make_figures/make_figure_Damage_comparison.R", echo=TRUE)
source("~/Dropbox/Research/TIBs/CR_Rcodes/outputs/make_figures/make_figure_Damage_comparison.R", echo=TRUE)
source("~/Dropbox/Research/TIBs/CR_Rcodes/procedures/functions_figures.R", encoding = 'ISO8859-1', echo=TRUE)
source("~/Dropbox/Research/TIBs/CR_Rcodes/outputs/make_figures/make_figure_Damage_comparison.R", echo=TRUE)
Add_SLR
rm(Add_SLR)
source("~/Dropbox/Research/TIBs/CR_Rcodes/procedures/functions_general.R", echo=TRUE)
source("~/Dropbox/Research/TIBs/CR_Rcodes/outputs/make_figures/make_figure_Damage_comparison.R", echo=TRUE)
source("~/Dropbox/Research/TIBs/CR_Rcodes/procedures/functions_figures.R", encoding = 'ISO8859-1', echo=TRUE)
source("~/Dropbox/Research/TIBs/CR_Rcodes/outputs/make_figures/make_figure_Damage_comparison.R", echo=TRUE)
source("~/Dropbox/Research/TIBs/CR_Rcodes/procedures/functions_general.R", echo=TRUE)
source("~/Dropbox/Research/TIBs/CR_Rcodes/outputs/make_figures/make_figure_Damage_comparison.R", echo=TRUE)
source("~/Dropbox/Research/TIBs/CR_Rcodes/procedures/functions_figures.R", encoding = 'ISO8859-1', echo=TRUE)
source("~/Dropbox/Research/TIBs/CR_Rcodes/procedures/functions_figures.R", encoding = 'ISO8859-1', echo=TRUE)
source("~/Dropbox/Research/TIBs/CR_Rcodes/outputs/make_figures/make_figure_Damage_comparison.R", echo=TRUE)
source("~/Dropbox/Research/TIBs/CR_Rcodes/procedures/functions_figures.R", encoding = 'ISO8859-1', echo=TRUE)
source("~/Dropbox/Research/TIBs/CR_Rcodes/outputs/make_figures/make_figure_Damage_comparison.R", echo=TRUE)
source("~/Dropbox/Research/TIBs/CR_Rcodes/outputs/make_figures/make_figure_Damage_comparison.R", echo=TRUE)
source("~/Dropbox/Research/TIBs/CR_Rcodes/outputs/make_figures/make_figure_calibration.R", echo=TRUE)
source("~/Dropbox/Research/TIBs/CR_Rcodes/procedures/functions_figures.R", encoding = 'ISO8859-1', echo=TRUE)
source("~/Dropbox/Research/TIBs/CR_Rcodes/outputs/make_figures/make_figure_calibration.R", echo=TRUE)
source("~/Dropbox/Research/TIBs/CR_Rcodes/outputs/make_figures/make_figure_calibration.R", echo=TRUE)
# Sea level rise ---------------------------------------------------------------
make_figure_calibration_SLR(model_sol,
main.title = "(b) 2100 Sea-level rise")
# Permafrost-related emissions -------------------------------------------------
make_figure_calibration_N(model_sol,
CumN.values = seq(0,2000,length.out=1000),
nb.values.interpol=1000,
xN = exp(seq(-20,20,length.out = 5000)),
main.title="(c.1) 2100 Permafrost-related emissions")
1.5/8
source("~/Dropbox/Research/TIBs/CR_Rcodes/outputs/make_figures/make_figure_Damage_comparison.R", echo=TRUE)
source("~/Dropbox/Research/TIBs/CR_Rcodes/outputs/make_figures/make_figure_Damage_comparison.R", echo=TRUE)
source("~/Dropbox/Research/TIBs/CR_Rcodes/outputs/make_tables/make_table_Estimated_Param.R", echo=TRUE)
