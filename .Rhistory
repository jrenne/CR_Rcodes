pdf(file=paste(getwd(),FILE,sep=""),pointsize=7,width=7, height=3.5)
par(mfrow=c(1,1))
par(plt=c(.1,.95,.15,.95))
# Refine grid (interpolation):
values.of.mu_D.fine <- seq(values.of.mu_D[1],
tail(values.of.mu_D,1),length.out = 40)
#values.of.mu_D.fine <- values.of.mu_D
# Use splines:
spline.T.P<-splinefun(values.of.mu_D,T.P,method="fmm")
spline.T.Q<-splinefun(values.of.mu_D,T.Q,method="fmm")
T.P.fit <- spline.T.P(values.of.mu_D.fine)
T.Q.fit <- spline.T.Q(values.of.mu_D.fine)
# T.P.fit <- T.P
# T.Q.fit <- T.Q
# values.of.mu_D.fine <- values.of.mu_D
plot(values.of.mu_D.fine,T.P.fit,type="l",
col=P.col.line,lwd=2,las=1,
cex.main=1.5,cex.axis=1.5,cex.lab=1.5,
main="",
xlab=expression(paste("Disaster uncertainty ",mu[D],sep="")),
ylab=expression(paste("Temperature Anomaly ",T[at],sep="")),
ylim=c(min(T.P.fit,T.Q.fit),
min(4.5,max(T.P.fit,T.Q.fit))),lty=2)
lines(values.of.mu_D.fine,T.Q.fit,
col=Q.col.line,lwd=2,lty=1)
abline(v=model_sol$parameters$mu_D,col="grey",lty=3,lwd=2)
legend("topleft",
legend=c(expression(paste("Expected ",T[at]," in 2100",sep="")),
expression(paste("Swaps Price ",T^S," in 2100",sep=""))
),
lty=c(2,1),
lwd=c(2,2),
col=c(P.col.line,Q.col.line),
bty = "n",cex=1.4)
dev.off()
FILE = paste("/outputs/Figures/Figure_cut_CP.pdf",sep="")
pdf(file=paste(getwd(),FILE,sep=""),pointsize=7,width=7, height=3.5)
par(mfrow=c(1,1))
par(plt=c(.1,.95,.15,.95))
# Refine grid (interpolation):
values.of.mu_D.fine <- seq(values.of.mu_D[1],
tail(values.of.mu_D,1),length.out = 40)
#values.of.mu_D.fine <- values.of.mu_D
# Use splines:
spline.T.P<-splinefun(values.of.mu_D,T.P,method="monoH.FC")
spline.T.Q<-splinefun(values.of.mu_D,T.Q,method="monoH.FC")
T.P.fit <- spline.T.P(values.of.mu_D.fine)
T.Q.fit <- spline.T.Q(values.of.mu_D.fine)
# T.P.fit <- T.P
# T.Q.fit <- T.Q
# values.of.mu_D.fine <- values.of.mu_D
plot(values.of.mu_D.fine,T.P.fit,type="l",
col=P.col.line,lwd=2,las=1,
cex.main=1.5,cex.axis=1.5,cex.lab=1.5,
main="",
xlab=expression(paste("Disaster uncertainty ",mu[D],sep="")),
ylab=expression(paste("Temperature Anomaly ",T[at],sep="")),
ylim=c(min(T.P.fit,T.Q.fit),
min(4.5,max(T.P.fit,T.Q.fit))),lty=2)
lines(values.of.mu_D.fine,T.Q.fit,
col=Q.col.line,lwd=2,lty=1)
abline(v=model_sol$parameters$mu_D,col="grey",lty=3,lwd=2)
legend("topleft",
legend=c(expression(paste("Expected ",T[at]," in 2100",sep="")),
expression(paste("Swaps Price ",T^S," in 2100",sep=""))
),
lty=c(2,1),
lwd=c(2,2),
col=c(P.col.line,Q.col.line),
bty = "n",cex=1.4)
dev.off()
FILE = paste("/outputs/Figures/Figure_cut_CP.pdf",sep="")
pdf(file=paste(getwd(),FILE,sep=""),pointsize=7,width=7, height=3.5)
par(mfrow=c(1,1))
par(plt=c(.1,.95,.15,.95))
# Refine grid (interpolation):
values.of.mu_D.fine <- seq(values.of.mu_D[1],
tail(values.of.mu_D,1),length.out = 50)
#values.of.mu_D.fine <- values.of.mu_D
# Use splines:
spline.T.P<-splinefun(values.of.mu_D,T.P,method="natural")
spline.T.Q<-splinefun(values.of.mu_D,T.Q,method="natural")
T.P.fit <- spline.T.P(values.of.mu_D.fine)
T.Q.fit <- spline.T.Q(values.of.mu_D.fine)
# T.P.fit <- T.P
# T.Q.fit <- T.Q
# values.of.mu_D.fine <- values.of.mu_D
plot(values.of.mu_D.fine,T.P.fit,type="l",
col=P.col.line,lwd=2,las=1,
cex.main=1.5,cex.axis=1.5,cex.lab=1.5,
main="",
xlab=expression(paste("Disaster uncertainty ",mu[D],sep="")),
ylab=expression(paste("Temperature Anomaly ",T[at],sep="")),
ylim=c(min(T.P.fit,T.Q.fit),
min(4.5,max(T.P.fit,T.Q.fit))),lty=2)
lines(values.of.mu_D.fine,T.Q.fit,
col=Q.col.line,lwd=2,lty=1)
abline(v=model_sol$parameters$mu_D,col="grey",lty=3,lwd=2)
legend("topleft",
legend=c(expression(paste("Expected ",T[at]," in 2100",sep="")),
expression(paste("Swaps Price ",T^S," in 2100",sep=""))
),
lty=c(2,1),
lwd=c(2,2),
col=c(P.col.line,Q.col.line),
bty = "n",cex=1.4)
dev.off()
values.of.mu_D
spline.T.P <- smooth.spline(values.of.mu_D,T.P,all.knots = TRUE)
T.P.fit    <- predict(spline.T.P,values.of.mu_D.fine)$y
plot(T.P.fit)
FILE = paste("/outputs/Figures/Figure_cut_CP.pdf",sep="")
pdf(file=paste(getwd(),FILE,sep=""),pointsize=7,width=7, height=3.5)
par(mfrow=c(1,1))
par(plt=c(.1,.95,.15,.95))
# Refine grid (interpolation):
values.of.mu_D.fine <- seq(values.of.mu_D[1],
tail(values.of.mu_D,1),length.out = 50)
#values.of.mu_D.fine <- values.of.mu_D
# # Use splines:
# spline.T.P<-splinefun(values.of.mu_D,T.P,method="natural")
# spline.T.Q<-splinefun(values.of.mu_D,T.Q,method="natural")
# T.P.fit <- spline.T.P(values.of.mu_D.fine)
# T.Q.fit <- spline.T.Q(values.of.mu_D.fine)
spline.T.P <- smooth.spline(values.of.mu_D,T.P,all.knots = TRUE)
T.P.fit    <- predict(spline.T.P,values.of.mu_D.fine)$y
spline.T.Q <- smooth.spline(values.of.mu_D,T.Q,all.knots = TRUE)
T.Q.fit    <- predict(spline.T.Q,values.of.mu_D.fine)$y
plot(values.of.mu_D.fine,T.P.fit,type="l",
col=P.col.line,lwd=2,las=1,
cex.main=1.5,cex.axis=1.5,cex.lab=1.5,
main="",
xlab=expression(paste("Disaster uncertainty ",mu[D],sep="")),
ylab=expression(paste("Temperature Anomaly ",T[at],sep="")),
ylim=c(min(T.P.fit,T.Q.fit),
min(4.5,max(T.P.fit,T.Q.fit))),lty=2)
lines(values.of.mu_D.fine,T.Q.fit,
col=Q.col.line,lwd=2,lty=1)
abline(v=model_sol$parameters$mu_D,col="grey",lty=3,lwd=2)
legend("topleft",
legend=c(expression(paste("Expected ",T[at]," in 2100",sep="")),
expression(paste("Swaps Price ",T^S," in 2100",sep=""))
),
lty=c(2,1),
lwd=c(2,2),
col=c(P.col.line,Q.col.line),
bty = "n",cex=1.4)
dev.off()
plot8T.Q.fit
plot(T.Q.fit)
?smooth.spline
FILE = paste("/outputs/Figures/Figure_cut_CP.pdf",sep="")
pdf(file=paste(getwd(),FILE,sep=""),pointsize=7,width=7, height=3.5)
par(mfrow=c(1,1))
par(plt=c(.1,.95,.15,.95))
# Refine grid (interpolation):
values.of.mu_D.fine <- seq(values.of.mu_D[1],
tail(values.of.mu_D,1),length.out = 50)
#values.of.mu_D.fine <- values.of.mu_D
# # Use splines:
# spline.T.P<-splinefun(values.of.mu_D,T.P,method="natural")
# spline.T.Q<-splinefun(values.of.mu_D,T.Q,method="natural")
# T.P.fit <- spline.T.P(values.of.mu_D.fine)
# T.Q.fit <- spline.T.Q(values.of.mu_D.fine)
spline.T.P <- smooth.spline(values.of.mu_D,T.P)
T.P.fit    <- predict(spline.T.P,values.of.mu_D.fine)$y
spline.T.Q <- smooth.spline(values.of.mu_D,T.Q)
T.Q.fit    <- predict(spline.T.Q,values.of.mu_D.fine)$y
plot(values.of.mu_D.fine,T.P.fit,type="l",
col=P.col.line,lwd=2,las=1,
cex.main=1.5,cex.axis=1.5,cex.lab=1.5,
main="",
xlab=expression(paste("Disaster uncertainty ",mu[D],sep="")),
ylab=expression(paste("Temperature Anomaly ",T[at],sep="")),
ylim=c(min(T.P.fit,T.Q.fit),
min(4.5,max(T.P.fit,T.Q.fit))),lty=2)
lines(values.of.mu_D.fine,T.Q.fit,
col=Q.col.line,lwd=2,lty=1)
abline(v=model_sol$parameters$mu_D,col="grey",lty=3,lwd=2)
legend("topleft",
legend=c(expression(paste("Expected ",T[at]," in 2100",sep="")),
expression(paste("Swaps Price ",T^S," in 2100",sep=""))
),
lty=c(2,1),
lwd=c(2,2),
col=c(P.col.line,Q.col.line),
bty = "n",cex=1.4)
dev.off()
FILE = paste("/outputs/Figures/Figure_cut_CP.pdf",sep="")
pdf(file=paste(getwd(),FILE,sep=""),pointsize=7,width=7, height=3.5)
par(mfrow=c(1,1))
par(plt=c(.1,.95,.15,.95))
# Refine grid (interpolation):
values.of.mu_D.fine <- seq(values.of.mu_D[1],
tail(values.of.mu_D,1),length.out = 50)
#values.of.mu_D.fine <- values.of.mu_D
# # Use splines:
# spline.T.P<-splinefun(values.of.mu_D,T.P,method="natural")
# spline.T.Q<-splinefun(values.of.mu_D,T.Q,method="natural")
# T.P.fit <- spline.T.P(values.of.mu_D.fine)
# T.Q.fit <- spline.T.Q(values.of.mu_D.fine)
spline.T.P <- smooth.spline(values.of.mu_D,T.P,nknots=10)
T.P.fit    <- predict(spline.T.P,values.of.mu_D.fine)$y
spline.T.Q <- smooth.spline(values.of.mu_D,T.Q,nknots=10)
T.Q.fit    <- predict(spline.T.Q,values.of.mu_D.fine)$y
plot(values.of.mu_D.fine,T.P.fit,type="l",
col=P.col.line,lwd=2,las=1,
cex.main=1.5,cex.axis=1.5,cex.lab=1.5,
main="",
xlab=expression(paste("Disaster uncertainty ",mu[D],sep="")),
ylab=expression(paste("Temperature Anomaly ",T[at],sep="")),
ylim=c(min(T.P.fit,T.Q.fit),
min(4.5,max(T.P.fit,T.Q.fit))),lty=2)
lines(values.of.mu_D.fine,T.Q.fit,
col=Q.col.line,lwd=2,lty=1)
abline(v=model_sol$parameters$mu_D,col="grey",lty=3,lwd=2)
legend("topleft",
legend=c(expression(paste("Expected ",T[at]," in 2100",sep="")),
expression(paste("Swaps Price ",T^S," in 2100",sep=""))
),
lty=c(2,1),
lwd=c(2,2),
col=c(P.col.line,Q.col.line),
bty = "n",cex=1.4)
dev.off()
spline.T.P <- smooth.spline(values.of.mu_D,T.P,nknots=5)
T.P.fit    <- predict(spline.T.P,values.of.mu_D.fine)$y
spline.T.Q <- smooth.spline(values.of.mu_D,T.Q,nknots=5)
T.Q.fit    <- predict(spline.T.Q,values.of.mu_D.fine)$y
plot(values.of.mu_D.fine,T.P.fit,type="l",
col=P.col.line,lwd=2,las=1,
cex.main=1.5,cex.axis=1.5,cex.lab=1.5,
main="",
xlab=expression(paste("Disaster uncertainty ",mu[D],sep="")),
ylab=expression(paste("Temperature Anomaly ",T[at],sep="")),
ylim=c(min(T.P.fit,T.Q.fit),
min(4.5,max(T.P.fit,T.Q.fit))),lty=2)
lines(values.of.mu_D.fine,T.Q.fit,
col=Q.col.line,lwd=2,lty=1)
abline(v=model_sol$parameters$mu_D,col="grey",lty=3,lwd=2)
spline.T.P <- smooth.spline(values.of.mu_D,T.P,nknots=3)
spline.T.P <- smooth.spline(values.of.mu_D,T.P,nknots=4)
T.P.fit    <- predict(spline.T.P,values.of.mu_D.fine)$y
spline.T.Q <- smooth.spline(values.of.mu_D,T.Q,nknots=4)
T.Q.fit    <- predict(spline.T.Q,values.of.mu_D.fine)$y
plot(values.of.mu_D.fine,T.P.fit,type="l",
col=P.col.line,lwd=2,las=1,
cex.main=1.5,cex.axis=1.5,cex.lab=1.5,
main="",
xlab=expression(paste("Disaster uncertainty ",mu[D],sep="")),
ylab=expression(paste("Temperature Anomaly ",T[at],sep="")),
ylim=c(min(T.P.fit,T.Q.fit),
min(4.5,max(T.P.fit,T.Q.fit))),lty=2)
lines(values.of.mu_D.fine,T.Q.fit,
col=Q.col.line,lwd=2,lty=1)
?smooth.spline
spline.T.P <- smooth.spline(values.of.mu_D,T.P,df=4)
T.P.fit    <- predict(spline.T.P,values.of.mu_D.fine)$y
spline.T.Q <- smooth.spline(values.of.mu_D,T.Q,df=4)
T.Q.fit    <- predict(spline.T.Q,values.of.mu_D.fine)$y
plot(values.of.mu_D.fine,T.P.fit,type="l",
col=P.col.line,lwd=2,las=1,
cex.main=1.5,cex.axis=1.5,cex.lab=1.5,
main="",
xlab=expression(paste("Disaster uncertainty ",mu[D],sep="")),
ylab=expression(paste("Temperature Anomaly ",T[at],sep="")),
ylim=c(min(T.P.fit,T.Q.fit),
min(4.5,max(T.P.fit,T.Q.fit))),lty=2)
lines(values.of.mu_D.fine,T.Q.fit,
col=Q.col.line,lwd=2,lty=1)
spline.T.P <- smooth.spline(values.of.mu_D,T.P,df=6)
T.P.fit    <- predict(spline.T.P,values.of.mu_D.fine)$y
spline.T.Q <- smooth.spline(values.of.mu_D,T.Q,df=6)
T.Q.fit    <- predict(spline.T.Q,values.of.mu_D.fine)$y
plot(values.of.mu_D.fine,T.P.fit,type="l",
col=P.col.line,lwd=2,las=1,
cex.main=1.5,cex.axis=1.5,cex.lab=1.5,
main="",
xlab=expression(paste("Disaster uncertainty ",mu[D],sep="")),
ylab=expression(paste("Temperature Anomaly ",T[at],sep="")),
ylim=c(min(T.P.fit,T.Q.fit),
min(4.5,max(T.P.fit,T.Q.fit))),lty=2)
spline.T.P <- smooth.spline(values.of.mu_D,T.P,df=6)
T.P.fit    <- predict(spline.T.P,values.of.mu_D.fine)$y
spline.T.Q <- smooth.spline(values.of.mu_D,T.Q,df=6)
T.Q.fit    <- predict(spline.T.Q,values.of.mu_D.fine)$y
plot(values.of.mu_D.fine,T.P.fit,type="l",
col=P.col.line,lwd=2,las=1,
cex.main=1.5,cex.axis=1.5,cex.lab=1.5,
main="",
xlab=expression(paste("Disaster uncertainty ",mu[D],sep="")),
ylab=expression(paste("Temperature Anomaly ",T[at],sep="")),
ylim=c(min(T.P.fit,T.Q.fit),
min(4.5,max(T.P.fit,T.Q.fit))),lty=2)
lines(values.of.mu_D.fine,T.Q.fit,
col=Q.col.line,lwd=2,lty=1)
spline.T.P <- smooth.spline(values.of.mu_D,T.P,df=10)
T.P.fit    <- predict(spline.T.P,values.of.mu_D.fine)$y
spline.T.Q <- smooth.spline(values.of.mu_D,T.Q,df=10)
T.Q.fit    <- predict(spline.T.Q,values.of.mu_D.fine)$y
plot(values.of.mu_D.fine,T.P.fit,type="l",
col=P.col.line,lwd=2,las=1,
cex.main=1.5,cex.axis=1.5,cex.lab=1.5,
main="",
xlab=expression(paste("Disaster uncertainty ",mu[D],sep="")),
ylab=expression(paste("Temperature Anomaly ",T[at],sep="")),
ylim=c(min(T.P.fit,T.Q.fit),
min(4.5,max(T.P.fit,T.Q.fit))),lty=2)
lines(values.of.mu_D.fine,T.Q.fit,
col=Q.col.line,lwd=2,lty=1)
?smooth.spline
spline.T.P <- smooth.spline(values.of.mu_D,T.P,df=4)
T.P.fit    <- predict(spline.T.P,values.of.mu_D.fine)$y
spline.T.Q <- smooth.spline(values.of.mu_D,T.Q,df=4)
T.Q.fit    <- predict(spline.T.Q,values.of.mu_D.fine)$y
plot(values.of.mu_D.fine,T.P.fit,type="l",
col=P.col.line,lwd=2,las=1,
cex.main=1.5,cex.axis=1.5,cex.lab=1.5,
main="",
xlab=expression(paste("Disaster uncertainty ",mu[D],sep="")),
ylab=expression(paste("Temperature Anomaly ",T[at],sep="")),
ylim=c(min(T.P.fit,T.Q.fit),
min(4.5,max(T.P.fit,T.Q.fit))),lty=2)
lines(values.of.mu_D.fine,T.Q.fit,
col=Q.col.line,lwd=2,lty=1)
points(values.of.mu_D,T.Q,
col=Q.col.line,lwd=2,lty=1)
FILE = paste("/outputs/Figures/Figure_cut_CP.pdf",sep="")
pdf(file=paste(getwd(),FILE,sep=""),pointsize=7,width=7, height=3.5)
par(mfrow=c(1,1))
par(plt=c(.1,.95,.15,.95))
# Refine grid (interpolation):
values.of.mu_D.fine <- seq(values.of.mu_D[1],
tail(values.of.mu_D,1),length.out = 50)
#values.of.mu_D.fine <- values.of.mu_D
# # Use splines:
# spline.T.P<-splinefun(values.of.mu_D,T.P,method="natural")
# spline.T.Q<-splinefun(values.of.mu_D,T.Q,method="natural")
# T.P.fit <- spline.T.P(values.of.mu_D.fine)
# T.Q.fit <- spline.T.Q(values.of.mu_D.fine)
spline.T.P <- smooth.spline(values.of.mu_D,T.P,df=4)
T.P.fit    <- predict(spline.T.P,values.of.mu_D.fine)$y
spline.T.Q <- smooth.spline(values.of.mu_D,T.Q,df=4)
T.Q.fit    <- predict(spline.T.Q,values.of.mu_D.fine)$y
plot(values.of.mu_D.fine,T.P.fit,type="l",
col=P.col.line,lwd=2,las=1,
cex.main=1.5,cex.axis=1.5,cex.lab=1.5,
main="",
xlab=expression(paste("Disaster uncertainty ",mu[D],sep="")),
ylab=expression(paste("Temperature Anomaly ",T[at],sep="")),
ylim=c(min(T.P.fit,T.Q.fit),
min(4.5,max(T.P.fit,T.Q.fit))),lty=2)
# lines(values.of.mu_D.fine,T.Q.fit,
#       col=Q.col.line,lwd=2,lty=1)
points(values.of.mu_D,T.Q,
col=Q.col.line,lwd=2,lty=1)
abline(v=model_sol$parameters$mu_D,col="grey",lty=3,lwd=2)
legend("topleft",
legend=c(expression(paste("Expected ",T[at]," in 2100",sep="")),
expression(paste("Swaps Price ",T^S," in 2100",sep=""))
),
lty=c(2,1),
lwd=c(2,2),
col=c(P.col.line,Q.col.line),
bty = "n",cex=1.4)
dev.off()
FILE = paste("/outputs/Figures/Figure_cut_CP.pdf",sep="")
pdf(file=paste(getwd(),FILE,sep=""),pointsize=7,width=7, height=3.5)
par(mfrow=c(1,1))
par(plt=c(.1,.95,.15,.95))
# Refine grid (interpolation):
values.of.mu_D.fine <- seq(values.of.mu_D[1],
tail(values.of.mu_D,1),length.out = 50)
#values.of.mu_D.fine <- values.of.mu_D
# # Use splines:
# spline.T.P<-splinefun(values.of.mu_D,T.P,method="natural")
# spline.T.Q<-splinefun(values.of.mu_D,T.Q,method="natural")
# T.P.fit <- spline.T.P(values.of.mu_D.fine)
# T.Q.fit <- spline.T.Q(values.of.mu_D.fine)
# Other type of splines:
# spline.T.P <- smooth.spline(values.of.mu_D,T.P,df=4)
# T.P.fit    <- predict(spline.T.P,values.of.mu_D.fine)$y
# spline.T.Q <- smooth.spline(values.of.mu_D,T.Q,df=4)
# T.Q.fit    <- predict(spline.T.Q,values.of.mu_D.fine)$y
plot(values.of.mu_D.fine,T.P.fit,type="l",
col=P.col.line,lwd=2,las=1,
cex.main=1.5,cex.axis=1.5,cex.lab=1.5,
main="",
xlab=expression(paste("Disaster uncertainty ",mu[D],sep="")),
ylab=expression(paste("Temperature Anomaly ",T[at],sep="")),
ylim=c(min(T.P.fit,T.Q.fit),
min(4.5,max(T.P.fit,T.Q.fit))),lty=1)
# lines(values.of.mu_D.fine,T.Q.fit,
#       col=Q.col.line,lwd=2,lty=1)
points(values.of.mu_D,T.Q,
col=Q.col.line,lwd=2,pch=16)
abline(v=model_sol$parameters$mu_D,col="grey",lty=3,lwd=2)
legend("topleft",
legend=c(expression(paste("Expected ",T[at]," in 2100",sep="")),
expression(paste("Swaps Price ",T^S," in 2100",sep=""))
),
lty=c(1,NaN),
pch=c(NaN,16),
lwd=c(2,2),
col=c(P.col.line,Q.col.line),
bty = "n",cex=1.4)
dev.off()
FILE = paste("/outputs/Figures/Figure_cut_CP.pdf",sep="")
pdf(file=paste(getwd(),FILE,sep=""),pointsize=7,width=7, height=3.5)
par(mfrow=c(1,1))
par(plt=c(.1,.95,.15,.95))
# Refine grid (interpolation):
values.of.mu_D.fine <- seq(values.of.mu_D[1],
tail(values.of.mu_D,1),length.out = 50)
#values.of.mu_D.fine <- values.of.mu_D
# # Use splines:
# spline.T.P<-splinefun(values.of.mu_D,T.P,method="natural")
# spline.T.Q<-splinefun(values.of.mu_D,T.Q,method="natural")
# T.P.fit <- spline.T.P(values.of.mu_D.fine)
# T.Q.fit <- spline.T.Q(values.of.mu_D.fine)
# Other type of splines:
# spline.T.P <- smooth.spline(values.of.mu_D,T.P,df=4)
# T.P.fit    <- predict(spline.T.P,values.of.mu_D.fine)$y
# spline.T.Q <- smooth.spline(values.of.mu_D,T.Q,df=4)
# T.Q.fit    <- predict(spline.T.Q,values.of.mu_D.fine)$y
plot(values.of.mu_D.fine,T.P.fit,type="l",
col=P.col.line,lwd=2,las=1,
cex.main=1.5,cex.axis=1.5,cex.lab=1.5,
main="",
xlab=expression(paste("Disaster uncertainty ",mu[D],sep="")),
ylab=expression(paste("Temperature Anomaly ",T[at],sep="")),
ylim=c(min(T.P.fit,T.Q.fit),
min(5,max(T.P.fit,T.Q.fit))),lty=1)
# lines(values.of.mu_D.fine,T.Q.fit,
#       col=Q.col.line,lwd=2,lty=1)
points(values.of.mu_D,T.Q,
col=Q.col.line,lwd=2,pch=16,cex=1.3)
abline(v=model_sol$parameters$mu_D,col="grey",lty=3,lwd=2)
legend("topleft",
legend=c(expression(paste("Expected ",T[at]," in 2100",sep="")),
expression(paste("Swaps Price ",T^S," in 2100",sep=""))
),
lty=c(1,NaN),
pch=c(NaN,16),
lwd=c(2,2),
col=c(P.col.line,Q.col.line),
bty = "n",cex=1.4,seg.len = 3)
dev.off()
source("~/Dropbox/Research/TIBs/CR_Rcodes/main.R", echo=TRUE)
scc.fct
scc.fct(model_sol,h=0)
plots <- 13:14
plots <- c(3,7)
plots <- 0:15
if(indic_plots_paper==1){
source("outputs/plots_paper.R")
}
indic_plots_paper
indic_plots_paper <- 1
indic_tables_paper <- 1
if(indic_plots_paper==1){
source("outputs/plots_paper.R")
}
source("~/Dropbox/Research/TIBs/CR_Rcodes/outputs/make_figures/make_figure_cut_CP_muD.R", echo=TRUE)
FILE = paste("/outputs/Figures/Figure_cut_CP.pdf",sep="")
pdf(file=paste(getwd(),FILE,sep=""),pointsize=7,width=7, height=3.5)
par(mfrow=c(1,1))
par(plt=c(.1,.95,.15,.95))
# Refine grid (interpolation):
values.of.mu_D.fine <- seq(values.of.mu_D[1],
tail(values.of.mu_D,1),length.out = 50)
# # Use splines:
# spline.T.P<-splinefun(values.of.mu_D,T.P,method="natural")
# spline.T.Q<-splinefun(values.of.mu_D,T.Q,method="natural")
# T.P.fit <- spline.T.P(values.of.mu_D.fine)
# T.Q.fit <- spline.T.Q(values.of.mu_D.fine)
# Other type of splines:
# spline.T.P <- smooth.spline(values.of.mu_D,T.P,df=4)
# T.P.fit    <- predict(spline.T.P,values.of.mu_D.fine)$y
# spline.T.Q <- smooth.spline(values.of.mu_D,T.Q,df=4)
# T.Q.fit    <- predict(spline.T.Q,values.of.mu_D.fine)$y
values.of.mu_D.fine <- values.of.mu_D
T.P.fit <- T.P
T.Q.fit <- T.Q
plot(values.of.mu_D.fine,T.P.fit,type="l",
col=P.col.line,lwd=2,las=1,
cex.main=1.5,cex.axis=1.5,cex.lab=1.5,
main="",
xlab=expression(paste("Disaster uncertainty ",mu[D],sep="")),
ylab=expression(paste("Temperature Anomaly ",T[at],sep="")),
ylim=c(min(T.P.fit,T.Q.fit),
min(5,max(T.P.fit,T.Q.fit))),lty=1)
# lines(values.of.mu_D.fine,T.Q.fit,
#       col=Q.col.line,lwd=2,lty=1)
points(values.of.mu_D,T.Q,
col=Q.col.line,lwd=2,pch=16,cex=1.3)
abline(v=model_sol$parameters$mu_D,col="grey",lty=3,lwd=2)
legend("topleft",
legend=c(expression(paste("Expected ",T[at]," in 2100",sep="")),
expression(paste("Swaps Price ",T^S," in 2100",sep=""))
),
lty=c(1,NaN),
pch=c(NaN,16),
lwd=c(2,2),
col=c(P.col.line,Q.col.line),
bty = "n",cex=1.4,seg.len = 3)
dev.off()
plots
plots <- 12:15
source("outputs/plots_paper.R")
source("outputs/tables_paper.R")
source("~/Dropbox/Research/TIBs/CR_Rcodes/main.R", echo=TRUE)
