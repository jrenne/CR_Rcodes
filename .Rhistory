u_specif_baseline <-
utility.optim(model_sol,
theta = model_sol$theta.opt,
Tend = model_sol$Tmax - t,
X = Xt,
indic_returns_mu_u.1 = TRUE)
# Temperature RP: ------
# with new model (after updating of mu):
HHH <- 10 # maturity in model periods
model_sol_new <- model_sol
model_sol_new <- model_solve(model_sol_new,indic_mitig = FALSE,
mu.chosen = mu.function(model_sol,
theta = RES.2param$par))
model_sol_new_P <- model_sol_new
# Kill pricing of risks in model_sol_P:
model_sol_new_P$pi <- lapply(model_sol_new_P$pi,function(x){0*x})
model_sol_new_P$eta0 <- 0*model_sol_new_P$eta0
model_sol_new_P$eta1 <- lapply(model_sol_new_P$eta1,function(x){0*x})
ET.P_new  <- varphi.tilde(model_sol_new_P,omega_T.at,HHH,
X=Xt,t=t)[[1]]
ZCB <- varphi(model_sol_new,omega_ZCB,HHH,X=Xt,t=t)
ET.Q_new  <- varphi.tilde(model_sol_new,omega_T.at,HHH,
X=Xt,t=t)[[1]]/ZCB$P.t
# EV    <- EV.fct(model_sol,h=H)
# ET.P  <- EV$EX$T_at[1:H]
# compute TRP for date t with baseline model:
# with baseline model (without updating of mu):
model_sol_P <- model_sol
# Kill pricing of risks in model_sol_P:
model_sol_P$pi <- lapply(model_sol_P$pi,function(x){0*x})
model_sol_P$eta0 <- 0*model_sol_P$eta0
model_sol_P$eta1 <- lapply(model_sol_P$eta1,function(x){0*x})
ET.P  <- varphi.tilde(model_sol_P,omega_T.at,HHH,
X=Xt,t=t)[[1]]
ZCB <- varphi(model_sol,omega_ZCB,HHH,X=Xt,t=t)
ET.Q  <- varphi.tilde(model_sol,omega_T.at,HHH,
X=Xt,t=t)[[1]]/ZCB$P.t
plot(ET.P,type="l")
lines(ET.Q,lty=2)
lines(ET.P_new,col="red")
lines(ET.Q_new,col="red",lty=2)
# ----------------------------------------------------------
# The last two entries are to check the effect of updating on SCC:
c(mu,
u_specif[[2]][indic_Mat],
u_specif_baseline[[2]][indic_Mat],
ET.Q[HHH] - ET.P[HHH],ET.Q_new[HHH] - ET.P_new[HHH],
ET.Q[HHH],ET.P[HHH],ET.Q_new[HHH],ET.P_new[HHH])
}
plot(model_sol$vec_date[2:length(model_sol$vec_date)],
mu.function(model_sol,theta = RES.2param$par,
t.ini = t)[2:length(model_sol$vec_date)],
type="l",col="white",lwd=3,
ylim=c(0,1),las=1,xlab="years",ylab="",
main="(c) Re-optimize - State vector = avg + 1 std.dev.")
for(t in 1:max.t){
lines(model_sol$vec_date[2:length(model_sol$vec_date)],
all_mu[t,2:length(model_sol$vec_date)],col="black")
}
lines(model_sol$vec_date[2:length(model_sol$vec_date)],
mu.function(model_sol,
theta = RES.2param$par,
t.ini = t)[2:length(model_sol$vec_date)],
type="l",col="dark grey",lty=3,lwd=4)
legend("bottomright",
legend=c("Baseline case","Re-optimized rates"),
lty=c(3,1),
col=c("grey","black"),
lwd=c(4,1),cex=1)
mean(abs((all_mu[,103]-all_mu[,104])/all_mu[,103]))
indic_Mat
model_sol_new$names.var.X
EV$CovX
diag(EV$CovX[[t]])
indics <- c(indic_Mat,
indic_Mup,
indic_Mlo,
indic_N)
indic_Mat <- which(model_sol$names.var.X=="M_at")
indic_Mup <- which(model_sol$names.var.X=="M_up")
indic_Mlo <- which(model_sol$names.var.X=="M_lo")
indic_N   <- which(model_sol$names.var.X=="N")
indics <- c(indic_Mat,
indic_Mup,
indic_Mlo,
indic_N)
indics
sqrt(diag(EV$CovX[[t]]))[indics]
all_mu <- foreach(t = 1:max.t,
.combine=rbind) %dopar% {
Xt <- EV$EXh[[t]]
indics <- c(indic_Mat,
indic_Mup,
indic_Mlo,
indic_N)
Xt[indics] <- Xt + 2*sqrt(diag(EV$CovX[[t]]))[indics]
# Re-optimize future trajectory of mu_t's:
RES.2param <- res.optim(model_sol,
model_sol$theta0,
Tend = model_sol$Tmax - t,
X = Xt)
# Compute resulting mu_t:
mu <- mu.function(model_sol,
theta = RES.2param$par,
t.ini = t)
# Recover new utility specification (for SCC analysis):-----
u_specif <-
utility.optim(model_sol,
theta = RES.2param$par,
Tend = model_sol$Tmax - t,
X = Xt,
indic_returns_mu_u.1 = TRUE)
u_specif_baseline <-
utility.optim(model_sol,
theta = model_sol$theta.opt,
Tend = model_sol$Tmax - t,
X = Xt,
indic_returns_mu_u.1 = TRUE)
# Temperature RP: ------
# with new model (after updating of mu):
HHH <- 10 # maturity in model periods
model_sol_new <- model_sol
model_sol_new <- model_solve(model_sol_new,indic_mitig = FALSE,
mu.chosen = mu.function(model_sol,
theta = RES.2param$par))
model_sol_new_P <- model_sol_new
# Kill pricing of risks in model_sol_P:
model_sol_new_P$pi <- lapply(model_sol_new_P$pi,function(x){0*x})
model_sol_new_P$eta0 <- 0*model_sol_new_P$eta0
model_sol_new_P$eta1 <- lapply(model_sol_new_P$eta1,function(x){0*x})
ET.P_new  <- varphi.tilde(model_sol_new_P,omega_T.at,HHH,
X=Xt,t=t)[[1]]
ZCB <- varphi(model_sol_new,omega_ZCB,HHH,X=Xt,t=t)
ET.Q_new  <- varphi.tilde(model_sol_new,omega_T.at,HHH,
X=Xt,t=t)[[1]]/ZCB$P.t
# EV    <- EV.fct(model_sol,h=H)
# ET.P  <- EV$EX$T_at[1:H]
# compute TRP for date t with baseline model:
# with baseline model (without updating of mu):
model_sol_P <- model_sol
# Kill pricing of risks in model_sol_P:
model_sol_P$pi <- lapply(model_sol_P$pi,function(x){0*x})
model_sol_P$eta0 <- 0*model_sol_P$eta0
model_sol_P$eta1 <- lapply(model_sol_P$eta1,function(x){0*x})
ET.P  <- varphi.tilde(model_sol_P,omega_T.at,HHH,
X=Xt,t=t)[[1]]
ZCB <- varphi(model_sol,omega_ZCB,HHH,X=Xt,t=t)
ET.Q  <- varphi.tilde(model_sol,omega_T.at,HHH,
X=Xt,t=t)[[1]]/ZCB$P.t
plot(ET.P,type="l")
lines(ET.Q,lty=2)
lines(ET.P_new,col="red")
lines(ET.Q_new,col="red",lty=2)
# ----------------------------------------------------------
# The last two entries are to check the effect of updating on SCC:
c(mu,
u_specif[[2]][indic_Mat],
u_specif_baseline[[2]][indic_Mat],
ET.Q[HHH] - ET.P[HHH],ET.Q_new[HHH] - ET.P_new[HHH],
ET.Q[HHH],ET.P[HHH],ET.Q_new[HHH],ET.P_new[HHH])
}
plot(model_sol$vec_date[2:length(model_sol$vec_date)],
mu.function(model_sol,theta = RES.2param$par,
t.ini = t)[2:length(model_sol$vec_date)],
type="l",col="white",lwd=3,
ylim=c(0,1),las=1,xlab="years",ylab="",
main="(c) Re-optimize - State vector = avg + 1 std.dev.")
for(t in 1:max.t){
lines(model_sol$vec_date[2:length(model_sol$vec_date)],
all_mu[t,2:length(model_sol$vec_date)],col="black")
}
lines(model_sol$vec_date[2:length(model_sol$vec_date)],
mu.function(model_sol,
theta = RES.2param$par,
t.ini = t)[2:length(model_sol$vec_date)],
type="l",col="dark grey",lty=3,lwd=4)
model_sol$names.var.X
indic_Mat  <- which(model_sol$names.var.X=="M_at")
indic_Mup  <- which(model_sol$names.var.X=="M_up")
indic_Mlo  <- which(model_sol$names.var.X=="M_lo")
indic_N    <- which(model_sol$names.var.X=="N")
indic_Tat  <- which(model_sol$names.var.X=="Forc")
indic_forc <- which(model_sol$names.var.X=="T_at")
omega_ZCB <- matrix(0,model_sol$n.X,1)
omega_T.at <- omega_ZCB
omega_T.at[indic_Tat] <- 1
source("~/Dropbox/Research/TIBs/CR_Rcodes/outputs/make_figures/make_figure_mu.R", echo=TRUE)
all_mu
dim(all_mu)
model_sol$Tmax
# --- State vector = avg + 1std dev
all_mu <- foreach(t = 1:max.t,
.combine=rbind) %dopar% {
Xt <- EV$EXh[[t]]
indics <- c(indic_Mat,
indic_Mup,
indic_Mlo,
indic_forc,
indic_Tat,
indic_N)
Xt[indics] <- Xt + 2*sqrt(diag(EV$CovX[[t]]))[indics]
# Re-optimize future trajectory of mu_t's:
RES.2param <- res.optim(model_sol,
model_sol$theta0,
Tend = model_sol$Tmax - t,
X = Xt)
# Compute resulting mu_t:
mu <- mu.function(model_sol,
theta = RES.2param$par,
t.ini = t)
# Recover new utility specification (for SCC analysis):-----
u_specif <-
utility.optim(model_sol,
theta = RES.2param$par,
Tend = model_sol$Tmax - t,
X = Xt,
indic_returns_mu_u.1 = TRUE)
u_specif_baseline <-
utility.optim(model_sol,
theta = model_sol$theta.opt,
Tend = model_sol$Tmax - t,
X = Xt,
indic_returns_mu_u.1 = TRUE)
# Temperature RP: ------
# with new model (after updating of mu):
HHH <- 10 # maturity in model periods
model_sol_new <- model_sol
model_sol_new <- model_solve(model_sol_new,indic_mitig = FALSE,
mu.chosen = mu.function(model_sol,
theta = RES.2param$par))
model_sol_new_P <- model_sol_new
# Kill pricing of risks in model_sol_P:
model_sol_new_P$pi <- lapply(model_sol_new_P$pi,function(x){0*x})
model_sol_new_P$eta0 <- 0*model_sol_new_P$eta0
model_sol_new_P$eta1 <- lapply(model_sol_new_P$eta1,function(x){0*x})
ET.P_new  <- varphi.tilde(model_sol_new_P,omega_T.at,HHH,
X=Xt,t=t)[[1]]
ZCB <- varphi(model_sol_new,omega_ZCB,HHH,X=Xt,t=t)
ET.Q_new  <- varphi.tilde(model_sol_new,omega_T.at,HHH,
X=Xt,t=t)[[1]]/ZCB$P.t
# EV    <- EV.fct(model_sol,h=H)
# ET.P  <- EV$EX$T_at[1:H]
# compute TRP for date t with baseline model:
# with baseline model (without updating of mu):
model_sol_P <- model_sol
# Kill pricing of risks in model_sol_P:
model_sol_P$pi <- lapply(model_sol_P$pi,function(x){0*x})
model_sol_P$eta0 <- 0*model_sol_P$eta0
model_sol_P$eta1 <- lapply(model_sol_P$eta1,function(x){0*x})
ET.P  <- varphi.tilde(model_sol_P,omega_T.at,HHH,
X=Xt,t=t)[[1]]
ZCB <- varphi(model_sol,omega_ZCB,HHH,X=Xt,t=t)
ET.Q  <- varphi.tilde(model_sol,omega_T.at,HHH,
X=Xt,t=t)[[1]]/ZCB$P.t
plot(ET.P,type="l")
lines(ET.Q,lty=2)
lines(ET.P_new,col="red")
lines(ET.Q_new,col="red",lty=2)
# ----------------------------------------------------------
# The last two entries are to check the effect of updating on SCC:
c(mu,
u_specif[[2]][indic_Mat],
u_specif_baseline[[2]][indic_Mat],
ET.Q[HHH] - ET.P[HHH],ET.Q_new[HHH] - ET.P_new[HHH],
ET.Q[HHH],ET.P[HHH],ET.Q_new[HHH],ET.P_new[HHH])
}
plot(model_sol$vec_date[2:length(model_sol$vec_date)],
mu.function(model_sol,theta = RES.2param$par,
t.ini = t)[2:length(model_sol$vec_date)],
type="l",col="white",lwd=3,
ylim=c(0,1),las=1,xlab="years",ylab="",
main="(c) Re-optimize - State vector = avg + 1 std.dev.")
for(t in 1:max.t){
lines(model_sol$vec_date[2:length(model_sol$vec_date)],
all_mu[t,2:length(model_sol$vec_date)],col="black")
}
lines(model_sol$vec_date[2:length(model_sol$vec_date)],
mu.function(model_sol,
theta = RES.2param$par,
t.ini = t)[2:length(model_sol$vec_date)],
type="l",col="dark grey",lty=3,lwd=4)
legend("bottomright",
legend=c("Baseline case","Re-optimized rates"),
lty=c(3,1),
col=c("grey","black"),
lwd=c(4,1),cex=1)
# compute change in SCC wrt basline:
chge_SCC <- (all_mu[,model_sol$Tmax+2] - all_mu[,model_sol$Tmax+1])/
all_mu[,model_sol$Tmax+1]
chge_TRP <- (all_mu[,model_sol$Tmax+4] - all_mu[,model_sol$Tmax+3])/
all_mu[,model_sol$Tmax+3]
print(paste("Average absolute percent change in SCC: ",round(mean(abs(chge_SCC)),5),sep=""))
print(paste("Average absolute percent change in TRP: ",round(mean(abs(chge_TRP)),5),sep=""))
source("~/Dropbox/Research/TIBs/CR_Rcodes/outputs/make_figures/make_figure_mu.R", echo=TRUE)
stopCluster(cl)
stopCluster(cl)
source("~/Dropbox/Research/TIBs/CR_Rcodes/outputs/make_figures/make_figure_mu.R", echo=TRUE)
stopCluster(cl)
stopCluster(cl)
source("~/Dropbox/Research/TIBs/CR_Rcodes/outputs/make_figures/make_figure_mu.R", echo=TRUE)
model_sol$names.var.X
source("~/Dropbox/Research/TIBs/CR_Rcodes/outputs/make_figures/make_figure_mu.R", echo=TRUE)
source("~/Dropbox/Research/TIBs/CR_Rcodes/outputs/make_figures/make_figure_mu.R", echo=TRUE)
indics
source("~/Dropbox/Research/TIBs/CR_Rcodes/outputs/make_figures/make_figure_mu.R", echo=TRUE)
stopCluster(cl)
stopCluster(cl)
stopCluster(cl)
stopCluster(cl)
source("~/Dropbox/Research/TIBs/CR_Rcodes/outputs/make_figures/make_figure_mu.R", echo=TRUE)
source("~/Dropbox/Research/TIBs/CR_Rcodes/tempo_XXX.R", echo=TRUE)
EV <- EV.fct(model_sol,h=20)
model_sol_P <- model_sol
# Kill pricing of risks in model_sol_P:
model_sol_P$pi <- lapply(model_sol_P$pi,function(x){0*x})
model_sol_P$eta0 <- 0*model_sol_P$eta0
model_sol_P$eta1 <- lapply(model_sol_P$eta1,function(x){0*x})
model_sol_P <- model_sol
# Kill pricing of risks in model_sol_P:
model_sol_P$pi <- lapply(model_sol_P$pi,function(x){0*x})
model_sol_P$eta0 <- 0*model_sol_P$eta0
model_sol_P$eta1 <- lapply(model_sol_P$eta1,function(x){0*x})
ET.P  <- varphi.tilde(model_sol_P,omega_T.at,HHH)[[1]]
ZCB <- varphi(model_sol,omega_ZCB,HHH,X=Xt,t=t)
ET.Q  <- varphi.tilde(model_sol,omega_T.at,HHH)[[1]]/ZCB$P.t
plot(ET.P,type="l")
lines(ET.Q,lty=2)
HHH <- 20
EV <- EV.fct(model_sol)
plot(ET.P,type="l")
lines(EV$EX$T_at,lty=2)
ET.P
EV$EX$T_at
HHH <- 20
EV <- EV.fct(model_sol)
model_sol_P <- model_sol
# Kill pricing of risks in model_sol_P:
model_sol_P$pi <- lapply(model_sol_P$pi,function(x){0*x})
model_sol_P$eta0 <- 0*model_sol_P$eta0
model_sol_P$eta1 <- lapply(model_sol_P$eta1,function(x){0*x})
ET.P  <- varphi.tilde(model_sol_P,omega_T.at,HHH)[[1]]
plot(ET.P,type="l")
lines(EV$EX$T_at,lty=2)
omega_T.at
model_sol$names.var.X
indic_T_at
HHH <- 20
EV <- EV.fct(model_sol)
indic_T_at    <- which(model_sol$names.var.X=="T_at")
omega_ZCB <- matrix(0,model_sol$n.X,1)
omega_T.at <- omega_ZCB
omega_T.at[indic_Tat] <- 1
model_sol_P <- model_sol
# Kill pricing of risks in model_sol_P:
model_sol_P$pi <- lapply(model_sol_P$pi,function(x){0*x})
model_sol_P$eta0 <- 0*model_sol_P$eta0
model_sol_P$eta1 <- lapply(model_sol_P$eta1,function(x){0*x})
ET.P  <- varphi.tilde(model_sol_P,indic_T_at,HHH)[[1]]
plot(ET.P,type="l")
lines(EV$EX$T_at,lty=2)
omega_T.at
HHH <- 20
EV <- EV.fct(model_sol)
indic_T_at    <- which(model_sol$names.var.X=="T_at")
omega_ZCB <- matrix(0,model_sol$n.X,1)
omega_T.at <- omega_ZCB
omega_T.at[indic_Tat] <- 1
model_sol_P <- model_sol
# Kill pricing of risks in model_sol_P:
model_sol_P$pi <- lapply(model_sol_P$pi,function(x){0*x})
model_sol_P$eta0 <- 0*model_sol_P$eta0
model_sol_P$eta1 <- lapply(model_sol_P$eta1,function(x){0*x})
ET.P  <- varphi.tilde(model_sol_P,omega_T.at,HHH)[[1]]
plot(ET.P,type="l")
lines(EV$EX$T_at,lty=2)
indic_Tat
indic_T_at
omega_T.at
indic_T_at    <- which(model_sol$names.var.X=="T_at")
omega_ZCB <- matrix(0,model_sol$n.X,1)
omega_T.at <- omega_ZCB
omega_T.at[indic_Tat] <- 1
omega_T.at
indic_T_at
indic_Tat
source("~/Dropbox/Research/TIBs/CR_Rcodes/outputs/make_figures/make_figure_mu.R", echo=TRUE)
source("~/Dropbox/Research/TIBs/CR_Rcodes/tempo_XXX.R", echo=TRUE)
source("~/Dropbox/Research/TIBs/CR_Rcodes/procedures/functions_general.R", echo=TRUE)
source("~/Dropbox/Research/TIBs/CR_Rcodes/outputs/make_figures/make_figure_mu.R", echo=TRUE)
model_sol$vector.ini
source("~/Dropbox/Research/TIBs/CR_Rcodes/outputs/make_figures/make_figure_Dsimul.R", echo=TRUE)
#* Description
#* 0 calibration
#* 1 tibs and swaps
#* 2 digital option
#* 3 pdf temperatures
#* 4 pdf carbon concentration in atmosphere
#* 5 climate beta
#* 6 Disasters Simulations
#* 7 pdf sea level
#* 8 mu (comparison with DICE)
#* 9 Response of temperature conditional on some MAT paths
#*10 Constant maturity - ZCB
#*11 Cut Climate Premium
#*12 Break-even rates of inflation
#*13 Merton 1
#*14 Merton 2
#*15 Housing prices
#*16 Confidence Interval SCC and Risk premiums
#*17 Relationship between SCC and Temperature risk premium
#*18 Relationship between SCC and Temperature risk premium, Lemoine approach
#*19 Illustrations of gamma-zero distribution
#*20 Comparison of damages
#*21 IRF 1 Gt Carbon
#*22 Comparison of SCC with ACE model
#*23 Comparison of risk-free yield curves with alternative approaches
# Maturity:
H <-model_sol$horiz.2100                                                        #maturity 2100
EV<-EV.fct(model_sol,H)
#Pricing
omega_ZCB  <- model_sol$omega_ZCB
omega_T.at <- model_sol$omega_T.at
a <- omega_T.at                                                                 #Options related to T_at in X
b <- 2                                                                          #Options pay when a'X < b
# Miscellaneous
n.date<-model_sol$Tmax
# Quantiles considered for pdf charts:
vector.of.CI <- c(0.5,0.8,0.9,0.95)
# Colors:
P.col.line <- brocolors("crayons")["Teal Blue"]
P.col<-adjustcolor( P.col.line, alpha.f = 0.15)
Q.col.line <- brocolors("crayons")["Mango Tango"]
Q.col<-adjustcolor( Q.col.line, alpha.f = 0.15)
# Nb of values used for refined grid when computing Conf Intervals:
nb.values.variable <- 400
source("~/Dropbox/Research/TIBs/CR_Rcodes/outputs/make_figures/make_figure_Dsimul.R", echo=TRUE)
source("~/Dropbox/Research/TIBs/Submissions/QE/R1/Codes/Simul_cumDamages.R", echo=TRUE)
source("~/Dropbox/Research/TIBs/Submissions/QE/R1/Codes/Simul_cumDamages.R", echo=TRUE)
source("~/Dropbox/Research/TIBs/Submissions/QE/R1/Codes/Simul_cumDamages.R", echo=TRUE)
source("~/Dropbox/Research/TIBs/Submissions/QE/R1/Codes/Simul_cumDamages.R", echo=TRUE)
source("~/Dropbox/Research/TIBs/Submissions/QE/R1/Codes/Simul_cumDamages.R", echo=TRUE)
source("~/Dropbox/Research/TIBs/Submissions/QE/R1/Codes/Simul_cumDamages.R", echo=TRUE)
source("~/Dropbox/Research/TIBs/Submissions/QE/R1/Codes/Simul_cumDamages.R", echo=TRUE)
source("~/Dropbox/Research/TIBs/Submissions/QE/R1/Codes/Simul_cumDamages.R", echo=TRUE)
source("~/Dropbox/Research/TIBs/Submissions/QE/R1/Codes/Simul_cumDamages.R", echo=TRUE)
source("~/Dropbox/Research/TIBs/Submissions/QE/R1/Codes/Simul_cumDamages.R", echo=TRUE)
source("~/Dropbox/Research/TIBs/Submissions/QE/R1/Codes/Simul_cumDamages.R", echo=TRUE)
source("~/Dropbox/Research/TIBs/Submissions/QE/R1/Codes/Simul_cumDamages.R", echo=TRUE)
source("~/Dropbox/Research/TIBs/Submissions/QE/R1/Codes/Simul_cumDamages.R", echo=TRUE)
source("~/Dropbox/Research/TIBs/Submissions/QE/R1/Codes/Simul_cumDamages.R", echo=TRUE)
source("~/Dropbox/Research/TIBs/Submissions/QE/R1/Codes/Simul_cumDamages.R", echo=TRUE)
source("~/Dropbox/Research/TIBs/Submissions/QE/R1/Codes/Simul_cumDamages.R", echo=TRUE)
205/3.66
370/3.66
37*3.66
149*3.67
71*3.67
205.4/3.67
source("~/Dropbox/Research/TIBs/CR_Rcodes/main.R", echo=TRUE)
scc.fct(model_sol,0)
source("~/Dropbox/Research/TIBs/CR_Rcodes/outputs/make_figures/make_figure_calibration.R", echo=TRUE)
source("~/Dropbox/Research/TIBs/CR_Rcodes/outputs/make_figures/make_figure_calibration.R", echo=TRUE)
source("~/Dropbox/Research/TIBs/CR_Rcodes/main.R", echo=TRUE)
source("~/Dropbox/Research/TIBs/CR_Rcodes/outputs/make_figures/make_figure_options.R", echo=TRUE)
source("~/Dropbox/Research/TIBs/CR_Rcodes/outputs/make_figures/make_figure_options.R", echo=TRUE)
P.OpDQs[[k]]
P.OpDPs[[k]]
P.OpDPs
P.OpDQs
Price.ZC
all.Probas.Q
all.Probas.P
ratios.probas <- all.Probas.Q/all.Probas.P
ratios.probas
source("~/Dropbox/Research/TIBs/CR_Rcodes/outputs/make_figures/make_figure_options.R", echo=TRUE)
source("~/Dropbox/Research/TIBs/CR_Rcodes/outputs/make_figures/make_figure_options.R", echo=TRUE)
ratios.probas
source("~/Dropbox/Research/TIBs/CR_Rcodes/outputs/make_figures/make_figure_options.R", echo=TRUE)
stopCluster(cl)
stopCluster(cl)
source("~/Dropbox/Research/TIBs/CR_Rcodes/outputs/make_figures/make_figure_RCP_to_TAT.R", encoding = 'ISO8859-1', echo=TRUE)
source("~/Dropbox/Research/TIBs/CR_Rcodes/outputs/make_figures/make_figure_RCP_to_TAT.R", encoding = 'ISO8859-1', echo=TRUE)
indic_Mat <- which(model_sol$names.var.X=="M_at")
indic_Mat
source("~/Dropbox/Research/TIBs/CR_Rcodes/outputs/make_figures/make_figure_RCP_to_TAT.R", encoding = 'ISO8859-1', echo=TRUE)
print(Tat.nonlinear)
print(Tat.linear)
print(rbind(c(Tat.nonlinear),c(Tat.linear)))
print(rbind(c(years),c(Tat.nonlinear),c(Tat.linear)))
source("~/Dropbox/Research/TIBs/CR_Rcodes/outputs/make_figures/make_figure_RCP_to_TAT.R", encoding = 'ISO8859-1', echo=FALSE)
indics
indic_Mat     <- which(model_sol$names.var.X=="M_at")
indic_Mup     <- which(model_sol$names.var.X=="M_up")
indic_Mlo     <- which(model_sol$names.var.X=="M_lo")
indic_N       <- which(model_sol$names.var.X=="N")
indic_forc    <- which(model_sol$names.var.X=="Forc")
indic_T_at    <- which(model_sol$names.var.X=="T_at")
indic_y_tilde <- which(model_sol$names.var.X=="y_tilde")
indics <- c(indic_Mat,
indic_Mup,
indic_Mlo,
#indic_forc,
indic_T_at,
#indic_N,
indic_y_tilde) # changes in Xt will be applied to these entries
indics
source("~/Dropbox/Research/TIBs/CR_Rcodes/outputs/make_figures/make_figure_mu.R", echo=TRUE)
source("~/Dropbox/Research/TIBs/CR_Rcodes/outputs/make_figures/make_figure_mu.R", echo=TRUE)
source("~/Dropbox/Research/TIBs/CR_Rcodes/outputs/make_figures/make_figure_mu.R", echo=TRUE)
source("~/Dropbox/Research/TIBs/CR_Rcodes/outputs/make_figures/make_figure_mu.R", echo=F)
source("~/Dropbox/Research/TIBs/CR_Rcodes/outputs/make_figures/make_figure_mu.R", echo=F)
source("~/Dropbox/Research/TIBs/CR_Rcodes/outputs/make_figures/make_figure_mu.R", echo=TRUE)
