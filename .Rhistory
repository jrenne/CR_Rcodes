#   C <- C * (1 + mut[t] - D + model$sigma * rnorm(nb.replic))
#   Cexog <- C
# }
# if(damage$damage.type=="G. Weitzman"){
#   D <- damage$coef.multip * damage$alpha[1] * T^damage$alpha[2]
#   C <- C * (1 + mut[t] - D + model$sigma * rnorm(nb.replic))
#   Cexog <- C
# }
# if(damage$damage.type=="L. Nordhaus-Sztorc"){
#   D <- damage$coef.multip * damage$alpha*T^2
#   Cexog <- Cexog * (1 + mut[t] + model$sigma * rnorm(nb.replic))
#   C <- Cexog * 1/(1 + D)
# }
# if(damage$damage.type=="L. Weitzman"){
#   D <- damage$coef.multip * ((T/damage$alpha[1])^2 +
#                                (T/damage$alpha[2])^damage$alpha[3])
#   Cexog <- Cexog * (1 + mut[t] + model$sigma * rnorm(nb.replic))
#   C <- Cexog * 1/(1 + D)
# }
# if(damage$damage.type=="L. Barnett-Brock-Hansen"){
#   y.bar <- 2
#   D <- damage$coef.multip * (damage$alpha[1]*T +
#                                damage$alpha[2]*T^2 +
#                                damage$alpha[3] * (T - y.bar)^2 * (T > y.bar))
#   Cexog <- Cexog * (1 + mut[t] + model$sigma * rnorm(nb.replic))
#   C <- Cexog * exp(- D)
# }
L <- L * exp(delta.lt[t])
M1 <- M1 + model$psi1 * gammat[t] * C
M2 <- M2 + model$psi2 * (1 - model$psi1) * gammat[t] * C -
model$psi * M2
M  <- M1 + M2
#F  <- model$nu * (log(model$M0/model$Mpre) + M/model$M0 - 1)
F  <- model$nu * log(M/model$Mpre)
T  <- T + model$phi * (F - model$s * T)
all.C[t,]      <- C
all.Cexog[t,]  <- Cexog
all.L[t,]  <- L
all.T[t,]  <- T
all.M1[t,] <- M1
all.M2[t,] <- M2
}
dim(all.C)
plot(all.C[,1])
plot(all.C[,100])
D
source("~/Dropbox/Research/TIBs/CR_Rcodes/procedures/functions_general.R", echo=TRUE)
model$sigma <- sigma
res.SCC <- compute.SCC.Lemoine(model,X0,H=H,nb.replic=nb.replic,
s.values = s.values,
coef.multip.values = coef.multip.values,
seed0=123)
source("~/Dropbox/Research/TIBs/CR_Rcodes/procedures/functions_general.R", echo=TRUE)
model$sigma <- sigma
res.SCC <- compute.SCC.Lemoine(model,X0,H=H,nb.replic=nb.replic,
s.values = s.values,
coef.multip.values = coef.multip.values,
seed0=123)
source("~/Dropbox/Research/TIBs/CR_Rcodes/procedures/functions_general.R", echo=TRUE)
source("~/Dropbox/Research/TIBs/CR_Rcodes/outputs/make_figures/make_figure_SCC_vs_TempRP_Lemoine.R", encoding = 'ISO8859-1', echo=TRUE)
all.damages <- define_damages()
all.damages <- define_damages()
i <- 1
compute_alternative_damage(T=1,all.damages[[1]])
compute_alternative_damage(T=1:5,all.damages[[1]])
model_sol$vec_date
model_sol$horiz.2100
model_sol$vector.ini$ini_Tat
model_sol$horiz.2100
which(model_sol$vec_date==2100)
T2100 <- 2
h_before_2100 <- which(model_sol$vec_date==2100) - 1
h_before_2100
seq_of_Temp <- seq(model_sol$vector.ini$ini_Tat,T2100,length.out = h_before_2100)
seq_of_Temp
all.damages <- define_damages()
i <- 1
compute_alternative_damage(T = seq_of_Temp,all.damages[[1]])
sum(compute_alternative_damage(T = seq_of_Temp,all.damages[[1]]))
prod((1+compute_alternative_damage(T = seq_of_Temp,all.damages[[1]])))-1
T2100 <- 4
h_before_2100 <- which(model_sol$vec_date==2100) - 1
seq_of_Temp <- seq(model_sol$vector.ini$ini_Tat,T2100,length.out = h_before_2100)
all.damages <- define_damages()
i <- 1
compute_alternative_damage(T = seq_of_Temp,all.damages[[1]])
prod((1+compute_alternative_damage(T = seq_of_Temp,all.damages[[1]])))-1
all.damages <- define_damages()
i <- 2
compute_alternative_damage(T = seq_of_Temp,all.damages[[1]])
prod((1+compute_alternative_damage(T = seq_of_Temp,all.damages[[1]])))-1
i <- 2
prod((1+compute_alternative_damage(T = seq_of_Temp,all.damages[[i]])))-1
i <- 3
prod((1+compute_alternative_damage(T = seq_of_Temp,all.damages[[i]])))-1
i <- 4
prod((1+compute_alternative_damage(T = seq_of_Temp,all.damages[[i]])))-1
i <- 5
prod((1+compute_alternative_damage(T = seq_of_Temp,all.damages[[i]])))-1
all.damages <- define_damages()
i <- 5
damages <- all.damages[[i]]
prod((1+compute_alternative_damage(T = seq_of_Temp,damages)))-1
all.damages <- define_damages()
i <- 5
damages <- all.damages[[i]]
if(stringr::str_sub(damages$damage.type,1,1)=="G"){
prod((1+compute_alternative_damage(T = seq_of_Temp,damages)))-1
}else{
compute_alternative_damage(T = seq_of_Temp,damages)[h_before_2100]
}
all.damages <- define_damages()
i <- 5
damages <- all.damages[[i]]
if(stringr::str_sub(damages$damage.type,1,1)=="G"){
prod((1+compute_alternative_damage(T = seq_of_Temp,damages)))-1
}else{
1 - compute_alternative_damage(T = seq_of_Temp,damages)[h_before_2100]
}
all.damages <- define_damages()
i <- 6
damages <- all.damages[[i]]
if(stringr::str_sub(damages$damage.type,1,1)=="G"){
prod((1+compute_alternative_damage(T = seq_of_Temp,damages)))-1
}else{
1 - compute_alternative_damage(T = seq_of_Temp,damages)[h_before_2100]
}
all.damages <- define_damages()
i <- 7
damages <- all.damages[[i]]
if(stringr::str_sub(damages$damage.type,1,1)=="G"){
prod((1+compute_alternative_damage(T = seq_of_Temp,damages)))-1
}else{
1 - compute_alternative_damage(T = seq_of_Temp,damages)[h_before_2100]
}
all.damages <- define_damages()
i <- 8
damages <- all.damages[[i]]
all.damages <- define_damages()
i <- 7
damages <- all.damages[[i]]
if(stringr::str_sub(damages$damage.type,1,1)=="G"){
prod((1+compute_alternative_damage(T = seq_of_Temp,damages)))-1
}else{
1 - compute_alternative_damage(T = seq_of_Temp,damages)[h_before_2100]
}
h_before_2100 <- which(model_sol$vec_date==2100) - 1
all.damages <- define_damages()
all.Temp    <- seq(2,4,length.out=10)
All_damages <- matrix(NaN,length(all.damages),length(all.Temp))
for(j in 1:length(all.Temp)){
T2100 <- all.Temp[j]
seq_of_Temp <- seq(model_sol$vector.ini$ini_Tat,T2100,length.out = h_before_2100)
for(i in 1:length(all.damages)){
damages <- all.damages[[i]]
if(stringr::str_sub(damages$damage.type,1,1)=="G"){
cumD <- prod((1+compute_alternative_damage(T = seq_of_Temp,damages)))-1
}else{
cumD <- 1 - compute_alternative_damage(T = seq_of_Temp,damages)[h_before_2100]
}
}
All_damages[i,j] <- cumD
}
All_damages
All_damages <- matrix(NaN,length(all.damages),length(all.Temp))
for(j in 1:length(all.Temp)){
T2100 <- all.Temp[j]
seq_of_Temp <- seq(model_sol$vector.ini$ini_Tat,T2100,length.out = h_before_2100)
for(i in 1:length(all.damages)){
damages <- all.damages[[i]]
if(stringr::str_sub(damages$damage.type,1,1)=="G"){
cumD <- prod((1+compute_alternative_damage(T = seq_of_Temp,damages)))-1
}else{
cumD <- 1 - compute_alternative_damage(T = seq_of_Temp,damages)[h_before_2100]
}
All_damages[i,j] <- cumD
}
}
All_damages
source("~/Dropbox/Research/TIBs/CR_Rcodes/outputs/make_figures/make_figure_Damage_comparison.R", echo=TRUE)
All_damages
source("~/Dropbox/Research/TIBs/CR_Rcodes/outputs/make_figures/make_figure_Damage_comparison.R", echo=TRUE)
source("~/Dropbox/Research/TIBs/CR_Rcodes/outputs/make_figures/make_figure_Damage_comparison.R", echo=TRUE)
source("~/Dropbox/Research/TIBs/CR_Rcodes/outputs/make_figures/make_figure_Damage_comparison.R", echo=TRUE)
source("~/Dropbox/Research/TIBs/CR_Rcodes/outputs/make_figures/make_figure_Damage_comparison.R", echo=TRUE)
source("~/Dropbox/Research/TIBs/CR_Rcodes/procedures/functions_general.R", echo=TRUE)
source("~/Dropbox/Research/TIBs/CR_Rcodes/outputs/make_figures/make_figure_Damage_comparison.R", echo=TRUE)
All_damages
all.damages
i
if(stringr::str_sub(damages$damage.type,1,1)=="G"){
cumD <- prod((1+compute_alternative_damage(T = seq_of_Temp,damages)))-1
}else{
cumD <- 1 - compute_alternative_damage(T = seq_of_Temp,damages)[h_before_2100]
}
cumD
h_before_2100
cumD
compute_alternative_damage(T = seq_of_Temp,damages)
source("~/Dropbox/Research/TIBs/CR_Rcodes/procedures/functions_general.R", echo=TRUE)
source("~/Dropbox/Research/TIBs/CR_Rcodes/outputs/make_figures/make_figure_Damage_comparison.R", echo=TRUE)
source("~/Dropbox/Research/TIBs/CR_Rcodes/procedures/functions_general.R", echo=TRUE)
source("~/Dropbox/Research/TIBs/CR_Rcodes/outputs/make_figures/make_figure_Damage_comparison.R", echo=TRUE)
source("~/Dropbox/Research/TIBs/CR_Rcodes/main.R", echo=TRUE)
source("~/Dropbox/Research/TIBs/CR_Rcodes/outputs/make_figures/make_figure_IRF100Gt.R", echo=TRUE)
source("~/Dropbox/Research/TIBs/CR_Rcodes/outputs/make_figures/make_figure_Damage_comparison.R", echo=TRUE)
source("~/Dropbox/Research/TIBs/CR_Rcodes/outputs/make_figures/make_figure_Damage_comparison.R", echo=TRUE)
source("~/Dropbox/Research/TIBs/CR_Rcodes/procedures/functions_general.R", echo=TRUE)
source("~/Dropbox/Research/TIBs/CR_Rcodes/outputs/make_figures/make_figure_Damage_comparison.R", echo=TRUE)
source("~/Dropbox/Research/TIBs/CR_Rcodes/outputs/make_figures/make_figure_SCC_vs_TempRP_Lemoine.R", encoding = 'ISO8859-1', echo=TRUE)
FILE = paste("/outputs/Figures/Figure_SCCvsTRP_Lemoine.pdf",sep="")
pdf(file=paste(getwd(),FILE,sep=""),pointsize=10,width=7, height=4)
load(file="outputs/results/SCC_vs_TRP_CR.Rdat") # Load results from CR model
par(mfrow=c(1,1))
par(plt=c(.15,.95,.2,.95))
plot(0,0,
ylim=c(max(-.7,min(all.SCC.RP,all.SCC.RP.CR)),
min(+.3,max(all.SCC.RP,all.SCC.RP.CR))),
xlim=c(max(-.3,min(all.T.RP,all.T.RP.CR)),
min(+.2,max(all.T.RP,all.T.RP.CR))),
col="white",
xlab="2100 Temperature risk premium, in Â°C",
ylab="SCC minus NPV of benefits (as a fraction of SCC)")
abline(h=0,col="grey",lty=3)
abline(v=0,col="grey",lty=3)
for(i in 1:length(all.damage)){
lines(all.T.RP[i,],all.SCC.RP[i,],col=i+1,lwd=2)
points(all.T.RP[i,1],all.SCC.RP[i,1],col=i+1,lwd=2,pch=0)
}
for(i in 1:dim(all.T.RP.CR)[1]){
lines(all.T.RP.CR[i,],all.SCC.RP.CR[i,],lty=i,lwd=2)
points(all.T.RP.CR[i,1],all.SCC.RP.CR[i,1],lwd=2,pch=0)
}
legend("topleft",
legend=c(extract(all.damage,1),
expression(paste("CR, EZ, ",gamma," = 7",sep="")),
expression(paste("CR, EZ, ",gamma," = 1.001",sep="")),
expression(paste("CR, CRRA, ",gamma," = 1.45",sep=""))),
lty=c(rep(1,length(all.damage)),1:3),
cex=1,
col=c(1+(1:length(all.damage)),rep("black",3)),
lwd=2,bty = "n")
dev.off()
FILE = paste("/outputs/Figures/Figure_SCCvsTRP_Lemoine.pdf",sep="")
pdf(file=paste(getwd(),FILE,sep=""),pointsize=10,width=7, height=4)
load(file="outputs/results/SCC_vs_TRP_CR.Rdat") # Load results from CR model
par(mfrow=c(1,1))
par(plt=c(.15,.95,.2,.95))
plot(0,0,
ylim=c(max(-.8,min(all.SCC.RP,all.SCC.RP.CR)),
min(+.6,max(all.SCC.RP,all.SCC.RP.CR))),
xlim=c(max(-.4,min(all.T.RP,all.T.RP.CR)),
min(+.5,max(all.T.RP,all.T.RP.CR))),
col="white",
xlab="2100 Temperature risk premium, in Â°C",
ylab="SCC minus NPV of benefits (as a fraction of SCC)")
abline(h=0,col="grey",lty=3)
abline(v=0,col="grey",lty=3)
for(i in 1:length(all.damage)){
lines(all.T.RP[i,],all.SCC.RP[i,],col=i+1,lwd=2)
points(all.T.RP[i,1],all.SCC.RP[i,1],col=i+1,lwd=2,pch=0)
}
for(i in 1:dim(all.T.RP.CR)[1]){
lines(all.T.RP.CR[i,],all.SCC.RP.CR[i,],lty=i,lwd=2)
points(all.T.RP.CR[i,1],all.SCC.RP.CR[i,1],lwd=2,pch=0)
}
legend("topleft",
legend=c(extract(all.damage,1),
expression(paste("CR, EZ, ",gamma," = 7",sep="")),
expression(paste("CR, EZ, ",gamma," = 1.001",sep="")),
expression(paste("CR, CRRA, ",gamma," = 1.45",sep=""))),
lty=c(rep(1,length(all.damage)),1:3),
cex=1,
col=c(1+(1:length(all.damage)),rep("black",3)),
lwd=2,bty = "n")
dev.off()
min(all.SCC.RP,all.SCC.RP.CR)
min(all.T.RP,all.T.RP.CR)
FILE = paste("/outputs/Figures/Figure_SCCvsTRP_Lemoine.pdf",sep="")
pdf(file=paste(getwd(),FILE,sep=""),pointsize=10,width=7, height=4)
load(file="outputs/results/SCC_vs_TRP_CR.Rdat") # Load results from CR model
par(mfrow=c(1,1))
par(plt=c(.15,.95,.2,.95))
plot(0,0,
ylim=c(max(-.8,min(all.SCC.RP,all.SCC.RP.CR)),
min(+.6,max(all.SCC.RP,all.SCC.RP.CR))),
xlim=c(min(-.4,min(all.T.RP,all.T.RP.CR)),
max(+.8,max(all.T.RP,all.T.RP.CR))),
col="white",
xlab="2100 Temperature risk premium, in Â°C",
ylab="SCC minus NPV of benefits (as a fraction of SCC)")
abline(h=0,col="grey",lty=3)
abline(v=0,col="grey",lty=3)
for(i in 1:length(all.damage)){
lines(all.T.RP[i,],all.SCC.RP[i,],col=i+1,lwd=2)
points(all.T.RP[i,1],all.SCC.RP[i,1],col=i+1,lwd=2,pch=0)
}
for(i in 1:dim(all.T.RP.CR)[1]){
lines(all.T.RP.CR[i,],all.SCC.RP.CR[i,],lty=i,lwd=2)
points(all.T.RP.CR[i,1],all.SCC.RP.CR[i,1],lwd=2,pch=0)
}
legend("topleft",
legend=c(extract(all.damage,1),
expression(paste("CR, EZ, ",gamma," = 7",sep="")),
expression(paste("CR, EZ, ",gamma," = 1.001",sep="")),
expression(paste("CR, CRRA, ",gamma," = 1.45",sep=""))),
lty=c(rep(1,length(all.damage)),1:3),
cex=1,
col=c(1+(1:length(all.damage)),rep("black",3)),
lwd=2,bty = "n")
dev.off()
all.T.RP
all.SCC.RP
FILE = paste("/outputs/Figures/Figure_SCCvsTRP_Lemoine.pdf",sep="")
pdf(file=paste(getwd(),FILE,sep=""),pointsize=10,width=7, height=4)
load(file="outputs/results/SCC_vs_TRP_CR.Rdat") # Load results from CR model
par(mfrow=c(1,1))
par(plt=c(.15,.95,.2,.95))
plot(0,0,
# ylim=c(max(-.8,min(all.SCC.RP,all.SCC.RP.CR)),
#        min(+.6,max(all.SCC.RP,all.SCC.RP.CR))),
# xlim=c(min(-.4,min(all.T.RP,all.T.RP.CR)),
#        max(+.8,max(all.T.RP,all.T.RP.CR))),
xlim=c(-.3,1),
ylim=c(-10,1),
col="white",
xlab="2100 Temperature risk premium, in Â°C",
ylab="SCC minus NPV of benefits (as a fraction of SCC)")
abline(h=0,col="grey",lty=3)
abline(v=0,col="grey",lty=3)
for(i in 1:length(all.damage)){
lines(all.T.RP[i,],all.SCC.RP[i,],col=i+1,lwd=2)
points(all.T.RP[i,1],all.SCC.RP[i,1],col=i+1,lwd=2,pch=0)
}
for(i in 1:dim(all.T.RP.CR)[1]){
lines(all.T.RP.CR[i,],all.SCC.RP.CR[i,],lty=i,lwd=2)
points(all.T.RP.CR[i,1],all.SCC.RP.CR[i,1],lwd=2,pch=0)
}
legend("topleft",
legend=c(extract(all.damage,1),
expression(paste("CR, EZ, ",gamma," = 7",sep="")),
expression(paste("CR, EZ, ",gamma," = 1.001",sep="")),
expression(paste("CR, CRRA, ",gamma," = 1.45",sep=""))),
lty=c(rep(1,length(all.damage)),1:3),
cex=1,
col=c(1+(1:length(all.damage)),rep("black",3)),
lwd=2,bty = "n")
dev.off()
source("~/Dropbox/Research/TIBs/CR_Rcodes/procedures/functions_general.R", echo=TRUE)
source("~/Dropbox/Research/TIBs/CR_Rcodes/procedures/functions_general.R", echo=TRUE)
source("~/Dropbox/Research/TIBs/CR_Rcodes/procedures/functions_general.R", echo=TRUE)
source("~/Dropbox/Research/TIBs/CR_Rcodes/outputs/make_figures/make_figure_Damage_comparison.R", echo=TRUE)
i <- 1
damages <- all.damages[[i]]
damages
compute_alternative_damage(T = seq_of_Temp,
damages,
time_step = model_sol$tstep)
cumD <- prod(1+compute_alternative_damage(T = seq_of_Temp,
damages,
time_step = model_sol$tstep))-1
cumD
seq_of_Temp
damage <- damages
T0  <- damage$alpha[2]
D <- damage$coef.multip * damage$alpha[1] * time_step * (T - T0)
time_step <- 1
time_step <- 5
source("~/Dropbox/Research/TIBs/CR_Rcodes/procedures/functions_general.R", echo=TRUE)
source("~/Dropbox/Research/TIBs/CR_Rcodes/outputs/make_figures/make_figure_Damage_comparison.R", echo=TRUE)
all.damage[[3]]
all.damage[[4]]
all.damage[[5]]
all.damage[[6]]
all.damage[[6]]$alpha
1/all.damage[[6]]$alpha^2
1/all.damage[[6]]$alpha[1]^2
1/all.damage[[6]]$alpha[2]^all.damage[[6]]$alpha[3]
pi1 <- 1/all.damage[[6]]$alpha[1]^2
pi3 <- 1/all.damage[[6]]$alpha[2]^all.damage[[6]]$alpha[3]
pi2 <- 1/all.damage[[6]]$alpha[1]^2
pi1 <- 0
D <- function(T){1/(1 + pi2*T^2 + pi3*T^all.damage[[6]]$alpha[3])}
D(6)
5.07e-6
5.07e-6*1000
source("~/Dropbox/Research/TIBs/CR_Rcodes/outputs/make_figures/make_figure_Damage_comparison.R", echo=TRUE)
source("~/Dropbox/Research/TIBs/CR_Rcodes/procedures/functions_general.R", echo=TRUE)
source("~/Dropbox/Research/TIBs/CR_Rcodes/outputs/make_figures/make_figure_Damage_comparison.R", echo=TRUE)
a <- list()
a[["prems"]] <- 1
a[["ensuite"]] <- 4
a
a[[1]]
a[[2]]
names(a)
source("~/Dropbox/Research/TIBs/CR_Rcodes/procedures/functions_general.R", echo=TRUE)
source("~/Dropbox/Research/TIBs/CR_Rcodes/outputs/make_figures/make_figure_Damage_comparison.R", echo=TRUE)
source("~/Dropbox/Research/TIBs/CR_Rcodes/procedures/functions_general.R", echo=TRUE)
source("~/Dropbox/Research/TIBs/CR_Rcodes/procedures/functions_general.R", echo=TRUE)
source("~/Dropbox/Research/TIBs/CR_Rcodes/procedures/functions_general.R", echo=TRUE)
source("~/Dropbox/Research/TIBs/CR_Rcodes/outputs/make_figures/make_figure_SCC_vs_TempRP_Lemoine.R", encoding = 'ISO8859-1', echo=TRUE)
source("~/Dropbox/Research/TIBs/CR_Rcodes/outputs/make_figures/make_figure_Damage_comparison.R", echo=TRUE)
model_sol$tstep
all.damages
source("~/Dropbox/Research/TIBs/CR_Rcodes/outputs/make_figures/make_figure_Damage_comparison.R", echo=TRUE)
All_damages
compute_alternative_damage(T = seq_of_Temp,
all.damages[4],
time_step = model_sol$tstep)
seq_of_Temp
type <- "L. Weitzman"
alpha = c(20.64,6.081,6.754)
exponent <- damage$alpha[3]
D <- coef.multip * ((T/damage$alpha[1])^2 +
(T/damage$alpha[2])^exponent)
coef.multip <- 1
alpha = c(20.64,6.081,6.754)
exponent <- damage$alpha[3]
D <- coef.multip * ((T/damage$alpha[1])^2 +
(T/damage$alpha[2])^exponent)
D <- 1/(1 + D)
D
T
T <- seq_of_Temp
T
alpha = c(20.64,6.081,6.754)
exponent <- damage$alpha[3]
D <- coef.multip * ((T/damage$alpha[1])^2 +
(T/damage$alpha[2])^exponent)
D <- 1/(1 + D)
D
source("~/Dropbox/Research/TIBs/CR_Rcodes/procedures/functions_general.R", echo=TRUE)
source("~/Dropbox/Research/TIBs/CR_Rcodes/outputs/make_figures/make_figure_Damage_comparison.R", echo=TRUE)
source("~/Dropbox/Research/TIBs/CR_Rcodes/outputs/make_figures/make_figure_SCC_vs_TempRP_Lemoine.R", encoding = 'ISO8859-1', echo=TRUE)
FILE = paste("/outputs/Figures/Figure_SCCvsTRP_Lemoine.pdf",sep="")
pdf(file=paste(getwd(),FILE,sep=""),pointsize=10,width=7, height=4)
load(file="outputs/results/SCC_vs_TRP_CR.Rdat") # Load results from CR model
par(mfrow=c(1,1))
par(plt=c(.15,.95,.2,.95))
plot(0,0,
ylim=c(min(-.8,min(all.SCC.RP,all.SCC.RP.CR)),
max(+.6,max(all.SCC.RP,all.SCC.RP.CR))),
xlim=c(min(-.4,min(all.T.RP,all.T.RP.CR)),
max(+.8,max(all.T.RP,all.T.RP.CR))),
# xlim=c(-.3,1),
# ylim=c(-10,1),
col="white",
xlab="2100 Temperature risk premium, in Â°C",
ylab="SCC minus NPV of benefits (as a fraction of SCC)")
abline(h=0,col="grey",lty=3)
abline(v=0,col="grey",lty=3)
for(i in 1:length(all.damage)){
lines(all.T.RP[i,],all.SCC.RP[i,],col=i+1,lwd=2)
points(all.T.RP[i,1],all.SCC.RP[i,1],col=i+1,lwd=2,pch=0)
}
for(i in 1:dim(all.T.RP.CR)[1]){
lines(all.T.RP.CR[i,],all.SCC.RP.CR[i,],lty=i,lwd=2)
points(all.T.RP.CR[i,1],all.SCC.RP.CR[i,1],lwd=2,pch=0)
}
legend("topleft",
legend=c(extract(all.damage,1),
expression(paste("CR, EZ, ",gamma," = 7",sep="")),
expression(paste("CR, EZ, ",gamma," = 1.001",sep="")),
expression(paste("CR, CRRA, ",gamma," = 1.45",sep=""))),
lty=c(rep(1,length(all.damage)),1:3),
cex=1,
col=c(1+(1:length(all.damage)),rep("black",3)),
lwd=2,bty = "n")
dev.off()
FILE = paste("/outputs/Figures/Figure_SCCvsTRP_Lemoine.pdf",sep="")
pdf(file=paste(getwd(),FILE,sep=""),pointsize=10,width=7, height=4)
load(file="outputs/results/SCC_vs_TRP_CR.Rdat") # Load results from CR model
par(mfrow=c(1,1))
par(plt=c(.15,.95,.2,.95))
plot(0,0,
ylim=c(min(-.8,min(all.SCC.RP,all.SCC.RP.CR)),
max(+.6,max(all.SCC.RP,all.SCC.RP.CR))),
xlim=c(min(-.4,min(all.T.RP,all.T.RP.CR)),
max(+.6,max(all.T.RP,all.T.RP.CR))),
# xlim=c(-.3,1),
# ylim=c(-10,1),
col="white",
xlab="2100 Temperature risk premium, in Â°C",
ylab="SCC minus NPV of benefits (as a fraction of SCC)")
abline(h=0,col="grey",lty=3)
abline(v=0,col="grey",lty=3)
for(i in 1:length(all.damage)){
lines(all.T.RP[i,],all.SCC.RP[i,],col=i+1,lwd=2)
points(all.T.RP[i,1],all.SCC.RP[i,1],col=i+1,lwd=2,pch=0)
}
for(i in 1:dim(all.T.RP.CR)[1]){
lines(all.T.RP.CR[i,],all.SCC.RP.CR[i,],lty=i,lwd=2)
points(all.T.RP.CR[i,1],all.SCC.RP.CR[i,1],lwd=2,pch=0)
}
legend("topleft",
legend=c(extract(all.damage,1),
expression(paste("CR, EZ, ",gamma," = 7",sep="")),
expression(paste("CR, EZ, ",gamma," = 1.001",sep="")),
expression(paste("CR, CRRA, ",gamma," = 1.45",sep=""))),
lty=c(rep(1,length(all.damage)),1:3),
cex=1,
col=c(1+(1:length(all.damage)),rep("black",3)),
lwd=2,bty = "n")
dev.off()
coef.multip.values
source("~/Dropbox/Research/TIBs/CR_Rcodes/outputs/make_figures/make_figure_Damage_comparison.R", echo=TRUE)
source("~/Dropbox/Research/TIBs/CR_Rcodes/outputs/make_figures/make_figure_Damage_comparison.R", echo=TRUE)
source("~/Dropbox/Research/TIBs/CR_Rcodes/outputs/make_figures/make_figure_Damage_comparison.R", echo=TRUE)
source("~/Dropbox/Research/TIBs/CR_Rcodes/procedures/functions_general.R", echo=TRUE)
source("~/Dropbox/Research/TIBs/CR_Rcodes/outputs/make_figures/make_figure_Damage_comparison.R", echo=TRUE)
source("~/Dropbox/Research/TIBs/Archives/DICE/simul_function.R", echo=TRUE)
