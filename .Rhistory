lines(EV$EX$Forc,col="blue")
EV$EX$Forc
model_sol$vector.ini$ini_F
all.F.nonlinear
lines(c(model_sol$vector.ini$ini_F,EV$EX$Forc),col="blue")
plot(all.F.nonlinear,type="l")
lines(all.F.linear,col="red")
lines(c(model_sol$vector.ini$ini_F,EV$EX$Forc),col="blue")
plot(all.Tat.nonlinear,type="l")
lines(all.Tat.linear,col="red")
lines(c(model_sol$vector.ini$ini_Tat,EV$EX$T_at),col="blue")
all.Tat.nonlinear
model_sol$vector.ini$ini_Tat
xi_3
xi_2
for(linearized in 0:1){
Tat_1 <- model_sol$vector.ini$ini_Tat
Tlo_1 <- model_sol$vector.ini$ini_Tlo
F_1   <- model_sol$vector.ini$ini_F
all.Tat <- Tat_1
all.F   <- F_1
for(t in 1:length(Mat.trajectory)){
Tat <- Tat_1 + xi_1 * (F_1 - tau/nu * Tat_1 - xi_2 * (Tat_1 - Tlo_1))
Tlo <- Tlo + xi_3 * (Tat_1 - Tlo_1)
if(linearized==0){
F <- tau * log(Mat.trajectory[t]/m_pi)/log(2) + f_ex[t]
}else{
F <- tau * log(m0)/log(2) +
tau/(log(2)*m0)*(Mat.trajectory[t]/m_pi - m0) + f_ex[t]
}
all.Tat <- c(all.Tat,Tat)
all.F   <- c(all.F,F)
Tat_1 <- Tat
Tlo_1 <- Tlo
F_1   <- F
}
if(linearized==1){
all.Tat.linear <- all.Tat
all.F.linear   <- all.F
}else{
all.Tat.nonlinear <- all.Tat
all.F.nonlinear   <- all.F
}
}
plot(all.Tat.nonlinear,type="l")
lines(all.Tat.linear,col="red")
lines(c(model_sol$vector.ini$ini_Tat,EV$EX$T_at),col="blue")
plot(all.F.nonlinear,type="l")
lines(all.F.linear,col="red")
lines(c(model_sol$vector.ini$ini_F,EV$EX$Forc),col="blue")
plot(f_ex)
for(linearized in 0:1){
Tat_1 <- model_sol$vector.ini$ini_Tat
Tlo_1 <- model_sol$vector.ini$ini_Tlo
F_1   <- model_sol$vector.ini$ini_F
all.Tat <- Tat_1
all.F   <- F_1
for(t in 1:length(Mat.trajectory)){
Tat <- Tat_1 + xi_1 * (F_1 - tau/nu * Tat_1 - xi_2 * (Tat_1 - Tlo_1))
Tlo <- Tlo_1 + xi_3 * (Tat_1 - Tlo_1)
if(linearized==0){
F <- tau * log(Mat.trajectory[t]/m_pi)/log(2) + f_ex[t]
}else{
F <- tau * log(m0)/log(2) +
tau/(log(2)*m0)*(Mat.trajectory[t]/m_pi - m0) + f_ex[t]
}
all.Tat <- c(all.Tat,Tat)
all.F   <- c(all.F,F)
Tat_1 <- Tat
Tlo_1 <- Tlo
F_1   <- F
}
if(linearized==1){
all.Tat.linear <- all.Tat
all.F.linear   <- all.F
}else{
all.Tat.nonlinear <- all.Tat
all.F.nonlinear   <- all.F
}
}
plot(all.Tat.nonlinear,type="l")
lines(all.Tat.linear,col="red")
lines(c(model_sol$vector.ini$ini_Tat,EV$EX$T_at),col="blue")
plot(all.F.nonlinear,type="l")
lines(all.F.linear,col="red")
lines(c(model_sol$vector.ini$ini_F,EV$EX$Forc),col="blue")
plot(all.Tat.nonlinear,type="l")
lines(all.Tat.linear,col="red")
plot(Mat.trajectory)
model_sol$vector.ini$ini_Mat
420*2.13
#Plot
FILE = paste("/outputs/Figures/Figure_F_approx.pdf",sep="")
pdf(file=paste(getwd(),FILE,sep=""),pointsize=8,width=6, height=6)
par(mfrow=c(3,1))
par(plt=c(.1,.95,.2,.85))
plot(ca.Mat, ca.F,col="white",ylim=c(1,6),xlim=range(gridMat),type="l",
las=1,xlab=expression(paste("M"[AT]," (GtC)")),
ylab=expression(paste("FCO"[2]," (in Wm-2)")),
main=expression(paste("(a) Relationship between radiative forcings and atmospheric carbon concentration")))
# polygon(ca.Mat,ca.F,
#         col=adjustcolor("grey17", alpha.f = 0.15), border = NaN)
# polygon(ca.Mat.2100,ca.F.2100,
#         col=adjustcolor("grey17", alpha.f = 0.3), border = NaN)
lines(gridMat,nlinF,
col="black",lwd=2)
lines(gridMat,linF,
col="black",lwd=2,lty=2)
legend("topleft",
legend=c("Linearized","Non-linearized"),
lty=c(2,1),
col=c("black","black"),
lwd=c(2,2),
bty = "n",cex=1)
# legend("bottomright",
#        title = "95% confidence interval:",
#        legend=c("2040","2100"),
#        fill=c(adjustcolor("grey17", alpha.f = 0.15),
#               adjustcolor("grey17", alpha.f = 0.3)),
#        density=c(NaN, NaN),
#        bty = "n",cex=1)
plot(gridMat[-1],Mat.pdf.2040,type="l",yaxt="n",
las=1,ylab="",xlab=expression(paste("M"[AT]," (GtC)")),
col=P.col.line,lwd=3,
main=expression(paste("(b) Atmospheric carbon concentration p.d.f.")))
lines(gridMat[-1],Mat.pdf.2100,
col=P.col.line,lwd=1,lty=1)
legend("topleft",
legend=c(interm.year,"2100"),
lty=c(1,1),
col=c(P.col.line,P.col.line),
lwd=c(3,1),
bty = "n",cex=1)
dev.off()
H <- model$horiz.2100 + 100
#Model-implied EV
EV<-EV.fct(model_sol,H)
Mat.trajectory <- EV$EX$M_at
param <- model_sol$parameters
H2100                <- model_sol$horiz.2100
f_ex                 <- matrix(rep(param$phi_0,H),H,1)
f_ex[1:H2100]        <- f_ex[1:H2100] +
(1/H2100)*(param$phi_1-param$phi_0)*((1:H2100)-1)
f_ex[(H2100+1):H] <- f_ex[(H2100+1):H] + (param$phi_1-param$phi_0)
Mat <- model_sol$vector.ini$ini_Mat
Mup <- model_sol$vector.ini$ini_Mup
Mlo <- model_sol$vector.ini$ini_Mlo
Tat_1 <- model_sol$vector.ini$ini_Tat
Tlo_1 <- model_sol$vector.ini$ini_Tlo
F_1   <- model_sol$vector.ini$ini_F
xi_1 <- model_sol$parameters$xi_1
xi_2 <- model_sol$parameters$xi_2
xi_3 <- model_sol$parameters$xi_3
tau <- model_sol$parameters$tau
nu  <- model_sol$parameters$nu
m_pi <- model_sol$parameters$m_pi
m0   <- model_sol$parameters$m0
phi_0 <- model_sol$parameters$phi_0
phi_1 <- model_sol$parameters$phi_1
# phi11 <- model_sol$parameters$varphi_11
# phi12 <- model_sol$parameters$varphi_12
# phi13 <- model_sol$parameters$varphi_13
# phi21 <- model_sol$parameters$varphi_21
# phi22 <- model_sol$parameters$varphi_22
# phi23 <- model_sol$parameters$varphi_23
# phi31 <- model_sol$parameters$varphi_31
# phi32 <- model_sol$parameters$varphi_32
# phi33 <- model_sol$parameters$varphi_33
# Phi <- matrix(c(phi11,phi21,phi31,
#                 phi12,phi22,phi32,
#                 phi13,phi23,phi33),3,3)
## check:
#1 - phi12 * model_sol$parameters$mateq/model_sol$parameters$mueq - phi23
#phi22
for(linearized in 0:1){
Tat_1 <- model_sol$vector.ini$ini_Tat
Tlo_1 <- model_sol$vector.ini$ini_Tlo
F_1   <- model_sol$vector.ini$ini_F
all.Tat <- Tat_1
all.F   <- F_1
for(t in 1:length(Mat.trajectory)){
Tat <- Tat_1 + xi_1 * (F_1 - tau/nu * Tat_1 - xi_2 * (Tat_1 - Tlo_1))
Tlo <- Tlo_1 + xi_3 * (Tat_1 - Tlo_1)
if(linearized==0){
F <- tau * log(Mat.trajectory[t]/m_pi)/log(2) + f_ex[t]
}else{
F <- tau * log(m0)/log(2) +
tau/(log(2)*m0)*(Mat.trajectory[t]/m_pi - m0) + f_ex[t]
}
all.Tat <- c(all.Tat,Tat)
all.F   <- c(all.F,F)
Tat_1 <- Tat
Tlo_1 <- Tlo
F_1   <- F
}
if(linearized==1){
all.Tat.linear <- all.Tat
all.F.linear   <- all.F
}else{
all.Tat.nonlinear <- all.Tat
all.F.nonlinear   <- all.F
}
}
plot(all.Tat.nonlinear,type="l")
lines(all.Tat.linear,col="red")
#lines(c(model_sol$vector.ini$ini_Tat,EV$EX$T_at),col="blue")
# plot(all.F.nonlinear,type="l")
# lines(all.F.linear,col="red")
# lines(c(model_sol$vector.ini$ini_F,EV$EX$Forc),col="blue")
#Plot
FILE = paste("/outputs/Figures/Figure_F_approx.pdf",sep="")
pdf(file=paste(getwd(),FILE,sep=""),pointsize=9,width=6, height=6)
par(mfrow=c(3,1))
par(plt=c(.1,.95,.2,.85))
plot(ca.Mat, ca.F,col="white",ylim=c(1,6),xlim=range(gridMat),type="l",
las=1,xlab=expression(paste("M"[AT]," (GtC)")),
ylab=expression(paste("FCO"[2]," (in Wm-2)")),
main=expression(paste("(a) Relationship between radiative forcings and atmospheric carbon concentration")))
# polygon(ca.Mat,ca.F,
#         col=adjustcolor("grey17", alpha.f = 0.15), border = NaN)
# polygon(ca.Mat.2100,ca.F.2100,
#         col=adjustcolor("grey17", alpha.f = 0.3), border = NaN)
lines(gridMat,nlinF,
col="black",lwd=2)
lines(gridMat,linF,
col="black",lwd=2,lty=2)
legend("topleft",
legend=c("Linearized","Non-linearized"),
lty=c(2,1),
col=c("black","black"),
lwd=c(2,2),
bty = "n",cex=1)
# legend("bottomright",
#        title = "95% confidence interval:",
#        legend=c("2040","2100"),
#        fill=c(adjustcolor("grey17", alpha.f = 0.15),
#               adjustcolor("grey17", alpha.f = 0.3)),
#        density=c(NaN, NaN),
#        bty = "n",cex=1)
plot(gridMat[-1],Mat.pdf.2040,type="l",yaxt="n",
las=1,ylab="",xlab=expression(paste("M"[AT]," (GtC)")),
col=P.col.line,lwd=3,
main=expression(paste("(b) Atmospheric carbon concentration p.d.f.")))
lines(gridMat[-1],Mat.pdf.2100,
col=P.col.line,lwd=1,lty=1)
legend("topleft",
legend=c(interm.year,"2100"),
lty=c(1,1),
col=c(P.col.line,P.col.line),
lwd=c(3,1),
bty = "n",cex=1)
dev.off()
H <- model$horiz.2100 + 100
#Model-implied EV
EV<-EV.fct(model_sol,H)
Mat.trajectory <- EV$EX$M_at
param <- model_sol$parameters
H2100                <- model_sol$horiz.2100
f_ex                 <- matrix(rep(param$phi_0,H),H,1)
f_ex[1:H2100]        <- f_ex[1:H2100] +
(1/H2100)*(param$phi_1-param$phi_0)*((1:H2100)-1)
f_ex[(H2100+1):H] <- f_ex[(H2100+1):H] + (param$phi_1-param$phi_0)
Mat <- model_sol$vector.ini$ini_Mat
Mup <- model_sol$vector.ini$ini_Mup
Mlo <- model_sol$vector.ini$ini_Mlo
Tat_1 <- model_sol$vector.ini$ini_Tat
Tlo_1 <- model_sol$vector.ini$ini_Tlo
F_1   <- model_sol$vector.ini$ini_F
xi_1 <- model_sol$parameters$xi_1
xi_2 <- model_sol$parameters$xi_2
xi_3 <- model_sol$parameters$xi_3
tau <- model_sol$parameters$tau
nu  <- model_sol$parameters$nu
m_pi <- model_sol$parameters$m_pi
m0   <- model_sol$parameters$m0
phi_0 <- model_sol$parameters$phi_0
phi_1 <- model_sol$parameters$phi_1
# phi11 <- model_sol$parameters$varphi_11
# phi12 <- model_sol$parameters$varphi_12
# phi13 <- model_sol$parameters$varphi_13
# phi21 <- model_sol$parameters$varphi_21
# phi22 <- model_sol$parameters$varphi_22
# phi23 <- model_sol$parameters$varphi_23
# phi31 <- model_sol$parameters$varphi_31
# phi32 <- model_sol$parameters$varphi_32
# phi33 <- model_sol$parameters$varphi_33
# Phi <- matrix(c(phi11,phi21,phi31,
#                 phi12,phi22,phi32,
#                 phi13,phi23,phi33),3,3)
## check:
#1 - phi12 * model_sol$parameters$mateq/model_sol$parameters$mueq - phi23
#phi22
for(linearized in 0:1){
Tat_1 <- model_sol$vector.ini$ini_Tat
Tlo_1 <- model_sol$vector.ini$ini_Tlo
F_1   <- model_sol$vector.ini$ini_F
all.Tat <- Tat_1
all.F   <- F_1
for(t in 1:length(Mat.trajectory)){
Tat <- Tat_1 + xi_1 * (F_1 - tau/nu * Tat_1 - xi_2 * (Tat_1 - Tlo_1))
Tlo <- Tlo_1 + xi_3 * (Tat_1 - Tlo_1)
if(linearized==0){
F <- tau * log(Mat.trajectory[t]/m_pi)/log(2) + f_ex[t]
}else{
F <- tau * log(m0)/log(2) +
tau/(log(2)*m0)*(Mat.trajectory[t]/m_pi - m0) + f_ex[t]
}
all.Tat <- c(all.Tat,Tat)
all.F   <- c(all.F,F)
Tat_1 <- Tat
Tlo_1 <- Tlo
F_1   <- F
}
if(linearized==1){
all.Tat.linear <- all.Tat
all.F.linear   <- all.F
}else{
all.Tat.nonlinear <- all.Tat
all.F.nonlinear   <- all.F
}
}
plot(all.Tat.nonlinear,type="l")
lines(all.Tat.linear,col="red")
#lines(c(model_sol$vector.ini$ini_Tat,EV$EX$T_at),col="blue")
# plot(all.F.nonlinear,type="l")
# lines(all.F.linear,col="red")
# lines(c(model_sol$vector.ini$ini_F,EV$EX$Forc),col="blue")
FILE = paste("/outputs/Figures/Figure_F_approx.pdf",sep="")
pdf(file=paste(getwd(),FILE,sep=""),pointsize=10,width=6, height=6)
par(mfrow=c(3,1))
par(plt=c(.1,.95,.25,.85))
plot(ca.Mat, ca.F,col="white",ylim=c(1,6),xlim=range(gridMat),type="l",
las=1,xlab=expression(paste("M"[AT]," (GtC)")),
ylab=expression(paste("FCO"[2]," (in Wm-2)")),
main=expression(paste("(a) Relationship between radiative forcings and atmospheric carbon concentration")))
# polygon(ca.Mat,ca.F,
#         col=adjustcolor("grey17", alpha.f = 0.15), border = NaN)
# polygon(ca.Mat.2100,ca.F.2100,
#         col=adjustcolor("grey17", alpha.f = 0.3), border = NaN)
lines(gridMat,nlinF,
col="black",lwd=2)
lines(gridMat,linF,
col="black",lwd=2,lty=2)
legend("topleft",
legend=c("Linearized","Non-linearized"),
lty=c(2,1),
col=c("black","black"),
lwd=c(2,2),
bty = "n",cex=1)
# legend("bottomright",
#        title = "95% confidence interval:",
#        legend=c("2040","2100"),
#        fill=c(adjustcolor("grey17", alpha.f = 0.15),
#               adjustcolor("grey17", alpha.f = 0.3)),
#        density=c(NaN, NaN),
#        bty = "n",cex=1)
plot(gridMat[-1],Mat.pdf.2040,type="l",yaxt="n",
las=1,ylab="",xlab=expression(paste("M"[AT]," (GtC)")),
col=P.col.line,lwd=3,
main=expression(paste("(b) Atmospheric carbon concentration p.d.f.")))
lines(gridMat[-1],Mat.pdf.2100,
col=P.col.line,lwd=1,lty=1)
legend("topleft",
legend=c(interm.year,"2100"),
lty=c(1,1),
col=c(P.col.line,P.col.line),
lwd=c(3,1),
bty = "n",cex=1)
dev.off()
sigma_F
source("~/Dropbox/Research/TIBs/CR_Rcodes/outputs/make_figures/make_figure_RFapprox.R", echo=TRUE)
model$horiz.2100
model_sol$tstep
H2500 <- model$horiz.2100 + (2500 - 2100)/model_sol$tstep
H2500
H2500 <- model$horiz.2100 + (2500 - 2100)/model_sol$tstep
#Model-implied EV
EV<-EV.fct(model_sol,H2500)
Mat.trajectory <- EV$EX$M_at
param <- model_sol$parameters
H2100                <- model_sol$horiz.2100
f_ex                 <- matrix(rep(param$phi_0,H2500),H2500,1)
f_ex[1:H2100]        <- f_ex[1:H2100] +
(1/H2100)*(param$phi_1-param$phi_0)*((1:H2100)-1)
f_ex[(H2100+1):H] <- f_ex[(H2100+1):H2500] + (param$phi_1-param$phi_0)
Mat <- model_sol$vector.ini$ini_Mat
Mup <- model_sol$vector.ini$ini_Mup
Mlo <- model_sol$vector.ini$ini_Mlo
Tat_1 <- model_sol$vector.ini$ini_Tat
Tlo_1 <- model_sol$vector.ini$ini_Tlo
F_1   <- model_sol$vector.ini$ini_F
xi_1 <- model_sol$parameters$xi_1
xi_2 <- model_sol$parameters$xi_2
xi_3 <- model_sol$parameters$xi_3
tau <- model_sol$parameters$tau
nu  <- model_sol$parameters$nu
m_pi <- model_sol$parameters$m_pi
m0   <- model_sol$parameters$m0
phi_0 <- model_sol$parameters$phi_0
phi_1 <- model_sol$parameters$phi_1
# phi11 <- model_sol$parameters$varphi_11
# phi12 <- model_sol$parameters$varphi_12
# phi13 <- model_sol$parameters$varphi_13
# phi21 <- model_sol$parameters$varphi_21
# phi22 <- model_sol$parameters$varphi_22
# phi23 <- model_sol$parameters$varphi_23
# phi31 <- model_sol$parameters$varphi_31
# phi32 <- model_sol$parameters$varphi_32
# phi33 <- model_sol$parameters$varphi_33
# Phi <- matrix(c(phi11,phi21,phi31,
#                 phi12,phi22,phi32,
#                 phi13,phi23,phi33),3,3)
## check:
#1 - phi12 * model_sol$parameters$mateq/model_sol$parameters$mueq - phi23
#phi22
for(linearized in 0:1){
Tat_1 <- model_sol$vector.ini$ini_Tat
Tlo_1 <- model_sol$vector.ini$ini_Tlo
F_1   <- model_sol$vector.ini$ini_F
all.Tat <- Tat_1
all.F   <- F_1
for(t in 1:length(Mat.trajectory)){
Tat <- Tat_1 + xi_1 * (F_1 - tau/nu * Tat_1 - xi_2 * (Tat_1 - Tlo_1))
Tlo <- Tlo_1 + xi_3 * (Tat_1 - Tlo_1)
if(linearized==0){
F <- tau * log(Mat.trajectory[t]/m_pi)/log(2) + f_ex[t]
}else{
F <- tau * log(m0)/log(2) +
tau/(log(2)*m0)*(Mat.trajectory[t]/m_pi - m0) + f_ex[t]
}
all.Tat <- c(all.Tat,Tat)
all.F   <- c(all.F,F)
Tat_1 <- Tat
Tlo_1 <- Tlo
F_1   <- F
}
if(linearized==1){
all.Tat.linear <- all.Tat
all.F.linear   <- all.F
}else{
all.Tat.nonlinear <- all.Tat
all.F.nonlinear   <- all.F
}
}
plot(all.Tat.nonlinear,type="l")
lines(all.Tat.linear,col="red")
#lines(c(model_sol$vector.ini$ini_Tat,EV$EX$T_at),col="blue")
# plot(all.F.nonlinear,type="l")
# lines(all.F.linear,col="red")
# lines(c(model_sol$vector.ini$ini_F,EV$EX$Forc),col="blue")
model_sol$vec_date[1]
years <- seq(model_sol$vec_date[1],2500,by=model_sol$tstep)
plot(years,all.Tat.nonlinear,type="l")
lines(years,all.Tat.linear,col="red")
years <- seq(model_sol$vec_date[1],2500,by=model_sol$tstep)
plot(years,all.Tat.nonlinear,type="l",lwd=2)
lines(years,all.Tat.linear,pch=19,col="grey")
years <- seq(model_sol$vec_date[1],2500,by=model_sol$tstep)
plot(years,all.Tat.nonlinear,type="l",lwd=2)
points(years,all.Tat.linear,pch=19,col="grey")
points(years,all.Tat.linear,pch=3,col="grey",lwd=2)
years <- seq(model_sol$vec_date[1],2500,by=model_sol$tstep)
plot(years,all.Tat.nonlinear,type="l",lwd=2)
points(years,all.Tat.linear,pch=3,col="grey",lwd=2)
years <- seq(model_sol$vec_date[1],2500,by=model_sol$tstep)
plot(years,all.Tat.nonlinear,type="l",lwd=2)
points(years,all.Tat.linear,pch=3,col="#000000FF",lwd=2)
years <- seq(model_sol$vec_date[1],2500,by=model_sol$tstep)
plot(years,all.Tat.nonlinear,type="l",lwd=2)
points(years,all.Tat.linear,pch=3,col="#0000044F",lwd=2)
years <- seq(model_sol$vec_date[1],2500,by=model_sol$tstep)
plot(years,all.Tat.nonlinear,type="l",lwd=2)
points(years,all.Tat.linear,pch=3,col="#0000044",lwd=2)
years <- seq(model_sol$vec_date[1],2500,by=model_sol$tstep)
plot(years,all.Tat.nonlinear,type="l",lwd=2)
points(years,all.Tat.linear,pch=3,col="#00000044",lwd=2)
years <- seq(model_sol$vec_date[1],2500,by=model_sol$tstep)
plot(years,all.Tat.nonlinear,type="l",lwd=2,
xlab="year","ylab= Atm. temperature, in °C",
main=expression(paste("(c) Effect of linearization on atm. temperature trajectory")))
source("~/Dropbox/Research/TIBs/CR_Rcodes/outputs/make_figures/make_figure_RFapprox.R", encoding = 'ISO8859-1', echo=TRUE)
all.Tat.nonlinear
years
years <- seq(model_sol$vec_date[1],2500,by=model_sol$tstep)
plot(years,all.Tat.nonlinear,type="l",lwd=2,
xlab="year","ylab= Atm. temperature, in °C",
main=expression(paste("(c) Effect of linearization on atm. temperature trajectory")))
source("~/Dropbox/Research/TIBs/CR_Rcodes/outputs/make_figures/make_figure_RFapprox.R", encoding = 'ISO8859-1', echo=TRUE)
source("~/Dropbox/Research/TIBs/CR_Rcodes/outputs/make_figures/make_figure_RFapprox.R", encoding = 'ISO8859-1', echo=TRUE)
source("~/Dropbox/Research/TIBs/CR_Rcodes/outputs/make_figures/make_figure_RFapprox.R", encoding = 'ISO8859-1', echo=TRUE)
?legend
plot(gridMat[-1],Mat.pdf.2040,type="l",yaxt="n",
las=1,ylab="",xlab=expression(paste("M"[AT]," (GtC)")),
col=P.col.line,lwd=3,
main=expression(paste("(b) Atmospheric carbon concentration p.d.f.")))
lines(gridMat[-1],Mat.pdf.2100,
col=P.col.line,lwd=1,lty=1)
legend("topleft",
legend=c(interm.year,"2100"),
lty=c(1,1),
col=c(P.col.line,P.col.line),
lwd=c(3,1),seg.len = 4,
bty = "n",cex=1)
source("~/Dropbox/Research/TIBs/CR_Rcodes/outputs/make_figures/make_figure_RFapprox.R", encoding = 'ISO8859-1', echo=TRUE)
source("~/Dropbox/Research/TIBs/CR_Rcodes/outputs/make_figures/make_figure_RFapprox.R", encoding = 'ISO8859-1', echo=TRUE)
source("~/Dropbox/Research/TIBs/CR_Rcodes/outputs/make_figures/make_figure_RFapprox.R", encoding = 'ISO8859-1', echo=TRUE)
dev.off()
dev.off()
dev.off()
dev.off()
source("~/Dropbox/Research/TIBs/CR_Rcodes/outputs/make_figures/make_figure_RFapprox.R", encoding = 'ISO8859-1', echo=TRUE)
plot(Mat.trajectory)
