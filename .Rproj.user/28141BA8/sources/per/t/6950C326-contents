#Initial model - solves model with initial parameters
source("./procedure/Functions_General_v2.R")
#library
library(optimx)
library(MASS)
library(expm)

#Data information
#*X = delc, ytilde, E, Eind, F, Mat, Mup, Mlo, Tat, Tlo, CumD, CumE, Cumdc, H, W

#*                      *#
#### Data preparation ####
#*                      *#
Tmax   <-100
#number of years in each period t \in(1:Tmax)
tstep  <-5
#---- Model Characteristics----
#vector of dates
vec_date<-seq(2020,by=tstep,len=Tmax-1)
#Initial values of theta_/_b for mitig optim. from DICE2016
theta0  <-list(c(log(0.17),-1/21*log(0.17)))
#Determine of max of iterations in mitig optim.
MAXIT   <-200 
#Define the horizon for optimization
horiz   <-(2100-vec_date[1])/tstep

#---- state vector ----
#CHANGE

#*                        *#
#### List of parameters ####
#*                        *#

#---- INITIALIZATION ----
#The World in Data + DICE
E   <-  38.45
Eind<-  35.85
Ftot<-   2
#CDICE, Folini et al. (2023)
Mat <- 851
Mup <- 628
Mlo <-1323
Tat <-   1.1
Tlo <-   0.27
H   <-   0.13

vector.ini<-list(
  ini_delc   = 0,
  ini_tildey = 0,
  ini_E      = E,
  ini_Eind   = Eind,
  ini_F      = Ftot,
  ini_Mat    = Mat,                                                            
  ini_Mup    = Mup,                                                            
  ini_Mlo    = Mlo,                                                           
  ini_Tat    = Tat,                                                            
  ini_Tlo    = Tlo,                                                           
  ini_CumD   = 0,
  ini_CumE   = E,
  ini_Cumdelc= 0,
  ini_H      = H
)
remove(E,Eind,Ftot,Mat,Mup,Mlo,Tat,Tlo,H)


#---- Economic parameters ----
#Covariance matrix eta
#Can add correlation and/or persistence in shocks
n.eta    <-3
Phi.prep <-matrix(0,n.eta,n.eta)
n.Z <- length(vector.ini)
if(indic_stocks==1){
  n.Z    <-n.Z + 5
}
if(indic_stocks==1){
  n.W    <-n.eta+3
}else{
  n.W    <-n.eta+2 
}

param.econ<-list(
  A_bar      = 0.4,                                                             #exp(5*0.015)/0.95-0.73
  sigma_a    = 0.03,                                                            #0.03*sqrt(1-Phi.prep[1,1]^2),
  Phi        = Phi.prep,
  gamma      = 7,
  delta      = (1 - .015)^5,
  delta_K    = 0.27,                                                            #Hall&Jones(1999)
  c0         = 299                                                              #Ini consumpt. (in tn) over tstep
)

remove(Phi.prep)
#---- Climate parameters ----
#CDICE
b12                  <-0.054
b23                  <-0.0082
mateq                <-607
mueq                 <-489
mleq                 <-1281
c1                   <-0.137*tstep
c3                   <-0.73
c4                   <-0.00689*tstep
f2co2                <-3.45
t2co2                <-3.25

#DICE2016
q0  <- 105.5
mu0 <- 0.03
#RCP 4.5 + 6
exp.mat.2100.rcp45_6 <-1168


param.clim<-list(
  m0         = exp.mat.2100.rcp45_6/mateq, 
  sigma_E    = 0, 
  sigma_F    = 0, 
  ell0.N     = 0,#9
  ell1.N     = 0,
  kappa_N    = 0,
  ell0.D     = 0,  
  ell1.D     = 0, #9
  mu_d       = 0,
  mu_n       = 0,
  eps_0      = 2.6,                                                             #DICE2016,eland0
  rho        = 0.115,                                                           #DICE2016,deland
  mateq      = mateq,                                                 
  mueq       = mueq,                                                      
  mleq       = mleq,                                                          
  phi_0      = 0.5,                                                             #DICE2016,fex0
  phi_1      = 1,                                                               #DICE2016,fex1
  m_pi       = mateq,                                                           
  xi_1       = c1,                                                           
  xi_2       = c3,                                                           
  xi_3       = c4,                                                           
  nu         = t2co2,                                                       
  tau        = f2co2,                                                           
  delsigma   =-0.001,                                                           #DICE2016,dsig
  e0         = vector.ini$ini_Eind,                                             
  q0         = q0,                                                            
  mu0        = mu0,                                                           
  sigma0     = vector.ini$ini_Eind/(q0*(1-mu0)),                                    
  gsigma1    =-0.0152,                                                          #DICE2016
  varphi_11  = 1-b12,                                                         
  varphi_12  = b12,                                                           
  varphi_13  = 0,                                                           
  varphi_21  = b12*mateq/mueq,                                                  
  varphi_22  = 1-b12*mateq/mueq-b23,                                          
  varphi_23  = b23,                                                          
  varphi_31  = 0,                                                           
  varphi_32  = b23*mueq/mleq,                                                 
  varphi_33  = 1-b23*mueq/mleq,                                               
  gback      = 0.025,                                                           #DICE2016
  pback      = 500,                                                             #DICE2016
  theta2     = 2.6,                                                             #DICE2016,expcost2
  a_sat      = 0,
  b_sat      = 0.025,
  c_sat      = 0,
  b_sk       = 0.3/80,
  T_0s       = 0.325,
  ell0.div   = 0,
  ell1.div   = 0, #?
  mu_div     = 0,
  chi.div    = 2,
  tol.GN     = 10^(-6),
  eps.GN     = 10^(-5)
)
remove(b12,b23,c1,c3,c4,mateq,mueq,mleq,f2co2,t2co2,q0,mu0,exp.mat.2100.rcp45_6)

param<-c(param.econ,param.clim)

#*                                *#
#### cALIBRATION of parameters ####
#*                                *#


#-----------------------------------moments
#These are the moments the model must replicate:
target_vector <- c(
  0.95,                                                                         #consump w/ damages & T_at=2
  0.9,                                                                          #consump w/ damages & T_at=4
  0.025,                                                                        #std w/ damages & T_at=4
  0.45,                                                                         #E(SLR) in 2100 & T_at=2
  0.93,                                                                         #E(SLR) in 2100 & T_at=4
  0.3,                                                                          #std(T_at) in 2100 + no-mitig
  225,                                                                          #E(CumN) @ T_at=2
  360,                                                                          #E(CumN) @ T_at=4
  50,                                                                           #std(CumN) @ T_at=4
  1185                                                                          #E(CumN) @ infinity
)

names(target_vector)<-c(
  "ECumD2",
  "ECumD4",
  "stdCumD4",
  "EH2",
  "EH4",
  "stdTat2100",
  "ECumN2",
  "ECumN4",
  "stdCumN4",
  "ECumNinf"
)

#*             *#
#### Pricing ####
#*             *#

#matrices of payoff depending on our state vector X
omega_ZCB     <-matrix(0,n.Z+n.W,1)
omega_T.at    <-omega_ZCB
omega_T.at[9] <-1
omega_Div     <-omega_ZCB



#---- Dividends & Stocks ----
#matrices storage for indic_stock==1
mu_div.0 <-matrix(0,nrow=Tmax)
kap0.om0 <-matrix(0,nrow=Tmax) #kappa0
mu_r0.om0<-matrix(0,nrow=Tmax) #mu_r0
kap1.a0  <-matrix(0,nrow=Tmax) #kappa1
mu_pd.a0 <-rep(list(matrix(0,nrow=n.Z+n.W+1)),Tmax) #mu_pd
mu_r1.a1 <-rep(list(matrix(0,nrow=n.Z+n.W)),Tmax) #mu_r1
ini_pd   <-0

#log-growth rate
#* must be a list of one element (mu_0) called muprice_0, and a matrix of n.X*1 (mu_1)
#* elements called muprice_1. 
#* No need to put the diagonal element (A0[13,13]=1) as a correction has been added in case.
#* Already -mu_1 in the matrix. Can think of it as mu_1.
Cum_dc1     <- matrix(0,n.Z+n.W,1)
Cum_dc1[1]  <- 1

Cum_dc <- list(muprice_0=0,muprice_1=Cum_dc1)

#---- Plots features ----
#Separating the TP for plot 11. Figure_cstH_ZCB
mu_c     <- matrix(0,nrow=Tmax)
indic_tp <- 0



#---- Solving the SDF ----
ini_matx<-list()
inf_matx<-list()
model<-list("parameters"=param,"vec_date"=vec_date,"tstep"=tstep,
            "MAXIT"=MAXIT,"n.eta"=n.eta,"n.W"=n.W,"n.Z"=n.Z,"Tmax"=Tmax,
            "theta0"=theta0,"horiz.2100"=horiz,"target_vector"=target_vector,
            "omega_ZCB"=omega_ZCB,"omega_T.at"=omega_T.at,"omega_Div"=omega_Div,
            "mu_div.0"=mu_div.0,"kap0.om0"=kap0.om0,"mu_r0.om0"=mu_r0.om0,
            "kap1.a0"=kap1.a0,"mu_pd.a0"=mu_pd.a0,"mu_r1.a1"=mu_r1.a1,
            "ini_pd"=ini_pd,"ini_matx"=ini_matx,"inf_matx"=inf_matx,
            "mu_c"=mu_c,"vector.ini"=vector.ini,"Cum_dc"=Cum_dc)


#---- Correct Calibration ----
model<-solveParam4D(model)
model<-solveParam4H(model)
model<-solveParam4N(model)

# 
# tic("Calibration sigma_E")
# sigE<-bisection(c(10,20),sigE.bisection,model)
# print(sigE)
# toc()
# 
model$parameters$sigma_E <- .5
model$parameters$sigma_F <- .2
model_sol<-model_solve(model,theta0)
H        <-model$horiz.2100+50
#Model-implied EV
EV<-EV.fct(model_sol,H)
plot(model$vec_date[1:H],sqrt(EV$VX$T_at),
     ylim=c(0,max(model$target_vector["stdTat2100"],sqrt(EV$VX$T_at))))
abline(h=model$target_vector["stdTat2100"],col="red")





# Essai

model$parameters$kappa_N <- .9
model$parameters$sigma_E <- 0
model$parameters$sigma_F <- 0
#model$parameters$mu_d <- 0
#model$parameters$mu_n <- 0
model_sol<-model_solve(model,theta0)



indic.cum <- 1
indic.var <- model_sol$n.X # N

indic.cum <- 0
indic.var <- 9

H<-model_sol$horiz.2100 # horizon for optim.
EV <- EV.fct(model_sol,H)

nb.traj = 100
A <- simul.function(model_sol,nb.simul.t = 16,nb.traj)
plot(A$T_at[,1],ylim=c(min(A$T_at),
                               max(A$T_at)))
for(i in 2:nb.traj){
  lines(A$T_at[,i])
}
#lines(-cumsum(EV$EX[[indic.var]][1:H]),col="red",lwd=2)
lines(EV$EX[[indic.var]][1:H],col="red",lwd=2)



if(indic.cum==1){
  values.of.variable <- seq(sum(EV$EX[[indic.var]][1:H])-1.5*H*sqrt(EV$VX[[indic.var]][H]),
                            sum(EV$EX[[indic.var]][1:H])+1.5*H*sqrt(EV$VX[[indic.var]][H]),
                            length.out=40)
}else{
  values.of.variable <- seq(EV$EX[[indic.var]][H]-3*sqrt(EV$VX[[indic.var]][H]),
                            EV$EX[[indic.var]][H]+3*sqrt(EV$VX[[indic.var]][H]),
                            length.out=40)
}

x <- exp(seq(-50,100,length.out = 1000))

all.Probas.P <- fourier(model_sol,x,values.of.variable,H,indic.var,indic.cum = indic.cum)

#par(mfrow=c(1,2))
par(mfrow=c(1,1))
all.f <- all.Probas.P - c(NaN,all.Probas.P[1:(length(all.Probas.P)-1)])
plot(values.of.variable,all.f,type="l",col="lightblue",lwd=3,lty=1,
     xlab="Cumulated permafrost-related carbon releases (GtC)",
     ylab="")
if(indic.cum==1){
  abline(v=sum(EV$EX[[indic.var]][1:H]),col="lightpink",lwd=3)
}else{
  abline(v=sum(EV$EX[[indic.var]][H]),col="lightpink",lwd=3)
}




stop()


tic("Solve Initial Model")
model_sol<-model_solve(model,theta0)
toc()

#Remove unnecessary elements:
remove(horiz,ini_pd,MAXIT,target_vector,vec_date,
       tstep,Tmax,n.eta,n.W,n.Z,theta0,
       omega_ZCB,omega_T.at,omega_Div,mu_r1.a1,mu_r0.om0,
       mu_pd.a0,mu_div.0,mu_c,kap1.a0,kap0.om0,inf_matx,ini_matx,
       vector.ini,param.clim,param.econ,Cum_dc,Cum_dc1)
